1) Which register number is used for the stack pointer (sp) in OS/161? 
  
The stack pointer uses register 29

command used: 'grep -r "sp " .'

source: src/kern/arch/mips/include/asmdefs.h - "#define sp  $29    /* stack pointer */"


2) What bus/busses does OS/161 support? 

OS/161 only supports LAMEbus for the mips architecture

command used: 'grep -r "support" . | grep "bus"'

source: "/root/cs161/src/kern/arch/mips/include/bus.h" - "* The only bus we support for MIPS is LAMEbus."


3) What is the difference between splhigh and spl0? 

spl stands for "set priority level" and manages the priority level of
interrupts. spl0 sets the interrupt priority to 0, whereas splhigh sets the
priority level to highest value (traditionally this value is 15), disabling all interrupts.

command used: 'grep -r "spl " . '

source: /src/kern/arch/mips/include/spl.h - 

* Ordinarily there would be a whole bunch of defined spl levels and
splhigh()    sets spl to the highest value, disabling all interrupts.
spl0()       sets spl to 0, enabling all interrupts.

4) Why do we use typedefs like u_int32_t instead of simply saying "int"?

Using typedefs allows for more readable and maintainable code. In a case where
it is necessary to augment a type or change it all together, a typedef allows
the user to simply redefine the type, and any additions to the type will
be propigated to other portions of code that use that type. It also provides a
way to abstract away complex type declarations, or verbose variable names.

5) What does splx return?

splx is a setter function that accepts a new spl as a parameter. upon
performing logic to set the new spl, the current spl is set to the oldspl and
oldspl is returned

source: /src/kern/arch/mips/mips/spl.c - "return oldspl;"
 

6) What is the highest interrupt level? 

15, based on a macro definition in the spl header file.

source: /src/kern/arch/mips/include/spl.h - #define SPL_HIGH   15

7) How frequently are hardclock interrupts generated?

from clock.h we see that: 

"* hardclock() is called from the timer interrupt HZ times a second."

What is HZ? based on the conditional statement in clock.h, we see that HZ is defined
as:

"/* hardclocks per second */
#if OPT_SYNCHPROBS
/* Make synchronization more exciting :) */
#define HZ  10000
#else
/* More realistic value */
#define HZ  100
#endif
"

The contitional "if OPT_SYNCHPROBS" appears to be 0 (false/not set), but
according to conf.kern, techically we should build the kernal to make sure
this value is indeed 0, but based on the documentation it appears that it's
not being set until later assignments

Therefore, with HZ = 100, the frequency of the hardclock is 100
interrupts/second


8) What functions comprise the standard interface to a VFS device? 

All of the functions defined in the vfs header file - vfs.h

9) How many characters are allowed in a volume name

on file systems that support the concept of a volume name, 32 characters.

command used: grep -r "name" . | grep "length"

source:
fs.h - "* fs_getvolname may return NULL on filesystem types that don't
 * support the concept of a volume name."

./kern/sfs.h:#define SFS_VOLNAME_SIZE  32            /* max length of volume
name */


10) How many direct blocks does a SFS file have?

15

source - #define SFS_NDIRECT       15            /* # of direct blocks in inode */


11)  What is the standard interface to a file system (i.e., what functions must you implement to implement a new file system)?

fs_sync, fs_getvolumename, fs_getroot, fs_unmount, fs_data.

source - fs.h: 

struct fs {
        int           (*fs_sync)(struct fs *);
        const char   *(*fs_getvolname)(struct fs *);
        struct vnode *(*fs_getroot)(struct fs *);
        int           (*fs_unmount)(struct fs *);

        void *fs_data;
};

12) What function puts a thread to sleep?

#thread_sleep

source - thread.h: 

 * go to sleep until wakeup() is called on the same address. The
 * address is treated as a key and is not interpreted or dereferenced.
 * Interrupts must be disabled.
 */
void thread_sleep(const void *addr);


13) How large are OS/161 pids?

os/161 pid's are 32-bit unsigned integers

source - kern/types.h:

typedef int32_t pid_t;   /* Process ID */


14) What operations can you do on a vnode

command used - first grep for "operations", inspect vnode.h, then format using "grep -r " *    vop_" vnode.h"

source - vnode.h

 *    vop_open        - Called on *each* open() of a file. Can be used to
 *    vop_close       - To be called on *last* close() of a file.
 *    vop_reclaim     - Called when vnode is no longer in use. Note that
 *    vop_read        - Read data from file to uio, at offset specified
 *    vop_readlink    - Read the contents of a symlink into a uio.
 *    vop_getdirentry - Read a single filename from a directory into a
 *    vop_write       - Write data from uio to file at offset specified
 *    vop_ioctl       - Perform ioctl operation OP on file using data
 *    vop_stat        - Return info about a file. The pointer is a
 *    vop_gettype     - Return type of file. The values for file types
 *    vop_tryseek     - Check if seeking to the specified position within
 *    vop_fsync       - Force any dirty buffers associated with this file
 *    vop_mmap        - Map file into memory. If you implement this
 *    vop_truncate    - Forcibly set size of file to the length passed
 *    vop_namefile    - Compute pathname relative to filesystem root
 *    vop_creat       - Create a regular file named NAME in the passed
 *    vop_symlink     - Create symlink named NAME in the passed directory,
 *    vop_mkdir       - Make directory NAME in the passed directory PARENTDIR.
 *    vop_link        - Create hard link, with name NAME, to file FILE
 *    vop_remove      - Delete non-directory object NAME from passed
 *    vop_rmdir       - Delete directory object NAME from passed
 *    vop_rename      - Rename file NAME1 in directory VN1 to be
 *    vop_lookup      - Parse PATHNAME relative to the passed directory
 *    vop_lookparent  - Parse PATHNAME relative to the passed directory

15. What is the maximum path length in OS/161?

1024

command used: grep -r "path" .

source: - kern/limits.h: 

/* Longest full path name */
#define PATH_MAX   1024

16. What is the system call number for a reboot?

8 
command used: grep -r "reboot" .

source: kern/callno.h

#define SYS_reboot       8

17. Where is STDIN_FILENO defined?

./kern/unistd.h:#define STDIN_FILENO  0      /* Standard input */

command used: grep -r "#define STDIN_FILENO"  
