This patch allows remote gdb over AF_UNIX (sometimes known as
AF_LOCAL) sockets.

diff -ru gdb-6.0-orig/gdb/acconfig.h gdb-6.0/gdb/acconfig.h
--- gdb-6.0-orig/gdb/acconfig.h	2003-06-04 16:51:27.000000000 -0400
+++ gdb-6.0/gdb/acconfig.h	2004-01-31 11:58:18.000000000 -0500
@@ -3,6 +3,9 @@
 # undef _GNU_SOURCE
 #endif
 
+/* Define if struct sockaddr_un has sun_len. */
+#undef HAVE_STRUCT_SOCKADDR_UN_SUN_LEN
+
 /* Define if your struct reg has r_fs.  */
 #undef HAVE_STRUCT_REG_R_FS
 
diff -ru gdb-6.0-orig/gdb/configure.in gdb-6.0/gdb/configure.in
--- gdb-6.0-orig/gdb/configure.in	2003-06-08 14:27:13.000000000 -0400
+++ gdb-6.0/gdb/configure.in	2004-01-31 12:12:18.000000000 -0500
@@ -335,6 +335,7 @@
 AC_CHECK_HEADERS(sys/reg.h sys/debugreg.h)
 AC_CHECK_HEADERS(sys/select.h)
 AC_CHECK_HEADERS(sys/syscall.h)
+AC_CHECK_HEADERS(sys/un.h)
 AC_CHECK_HEADERS(sys/user.h)
 AC_CHECK_HEADERS(sys/wait.h wait.h)
 AC_CHECK_HEADERS(termios.h termio.h sgtty.h)
@@ -369,6 +370,22 @@
 
 AC_TYPE_SIGNAL
 
+# --------------------------- #
+# Checks for struct members.  #
+# --------------------------- #
+
+# not yet...
+#AC_CHECK_MEMBER(struct sockaddr_un.sun_len,,,[#include <sys/un.h>])
+
+AC_MSG_CHECKING(for sun_len in struct sockaddr_un)
+AC_EGREP_HEADER(sun_len, sys/un.h, member_struct_sockaddr_un_sun_len=yes,
+		member_struct_sockaddr_un_sun_len=no)
+if test $member_struct_sockaddr_un_sun_len = yes
+then
+  AC_DEFINE(HAVE_STRUCT_SOCKADDR_UN_SUN_LEN, 1)
+fi
+AC_MSG_RESULT($member_struct_sockaddr_un_sun_len)
+
 # ------------------------------------- #
 # Checks for compiler characteristics.  #
 # ------------------------------------- #
diff -ru gdb-6.0-orig/gdb/ser-tcp.c gdb-6.0/gdb/ser-tcp.c
--- gdb-6.0-orig/gdb/ser-tcp.c	2003-05-13 15:40:11.000000000 -0400
+++ gdb-6.0/gdb/ser-tcp.c	2004-01-31 12:11:40.000000000 -0500
@@ -1,5 +1,5 @@
-/* Serial interface for raw TCP connections on Un*x like systems
-   Copyright 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2001
+/* Serial interface for raw TCP and AF_LOCAL connections on Un*x like systems
+   Copyright 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2001, 2004
    Free Software Foundation, Inc.
 
    This file is part of GDB.
@@ -39,9 +39,20 @@
 #include <sys/socket.h>
 #include <netinet/tcp.h>
 
+#ifdef HAVE_SYS_UN_H
+#define _XOPEN_SOURCE_EXTENDED	/* Apparently required on DEC/OSF. */
+#include <sys/un.h>		/* For struct sockaddr_un. */
+#ifndef SUN_LEN
+/* some systems (e.g., Solaris) don't define this handy macro */
+#define SUN_LEN(sau) \
+  (sizeof(*(sau)) - sizeof((sau)->sun_path) + strlen((sau)->sun_path))
+#endif
+#endif /* HAVE_SYS_UN_H */
+
 #include <signal.h>
 #include "gdb_string.h"
 
+
 static int net_open (struct serial *scb, const char *name);
 static void net_close (struct serial *scb);
 extern int (*ui_loop_hook) (int);
@@ -59,60 +70,112 @@
 {
   char *port_str, hostname[100];
   int n, port, tmp;
-  int use_udp;
+  enum { USE_TCP, USE_UDP, USE_LOCAL } mode;
   struct hostent *hostent;
-  struct sockaddr_in sockaddr;
+  struct sockaddr_in sockaddri;
+  struct sockaddr *sockaddrp;
+  int socklen;
+#ifdef HAVE_SYS_UN_H
+  struct sockaddr_un sockaddru;
+#endif
 
-  use_udp = 0;
+  mode = USE_TCP;
   if (strncmp (name, "udp:", 4) == 0)
     {
-      use_udp = 1;
+      mode = USE_UDP;
       name = name + 4;
     }
   else if (strncmp (name, "tcp:", 4) == 0)
     name = name + 4;
+  else if (strncmp (name, "unix:", 5) == 0)
+    {
+      mode = USE_LOCAL;
+      name = name + 5;
+    }
+  else if (strncmp (name, "local:", 6) == 0)
+    {
+      mode = USE_LOCAL;
+      name = name + 6;
+    }
 
-  port_str = strchr (name, ':');
+  if (mode == USE_TCP || mode == USE_UDP)
+    {
+      port_str = strchr (name, ':');
 
-  if (!port_str)
-    error ("net_open: No colon in host name!");	   /* Shouldn't ever happen */
+      if (!port_str)
+	error ("net_open: No colon in host name!"); /* Shouldn't ever happen */
 
-  tmp = min (port_str - name, (int) sizeof hostname - 1);
-  strncpy (hostname, name, tmp);	/* Don't want colon */
-  hostname[tmp] = '\000';	/* Tie off host name */
-  port = atoi (port_str + 1);
+      tmp = min (port_str - name, (int) sizeof hostname - 1);
+      strncpy (hostname, name, tmp);	/* Don't want colon */
+      hostname[tmp] = '\000';	/* Tie off host name */
+      port = atoi (port_str + 1);
+
+      /* default hostname is localhost */
+      if (!hostname[0])
+	strcpy (hostname, "localhost");
 
-  /* default hostname is localhost */
-  if (!hostname[0])
-    strcpy (hostname, "localhost");
+      hostent = gethostbyname (hostname);
+      if (!hostent)
+	{
+	  fprintf_unfiltered (gdb_stderr, "%s: unknown host\n", hostname);
+	  errno = ENOENT;
+	  return -1;
+	}
 
-  hostent = gethostbyname (hostname);
-  if (!hostent)
+      sockaddri.sin_family = AF_INET;
+      sockaddri.sin_port = htons (port);
+      memcpy (&sockaddri.sin_addr.s_addr, hostent->h_addr,
+	      sizeof (struct in_addr));
+      socklen = sizeof(struct sockaddr_in);
+      sockaddrp = (struct sockaddr *)&sockaddri;
+    }
+  else if (mode == USE_LOCAL)
     {
-      fprintf_unfiltered (gdb_stderr, "%s: unknown host\n", hostname);
-      errno = ENOENT;
+#ifdef HAVE_SYS_UN_H
+      if (strlen(name) >= sizeof(sockaddru.sun_path))
+	{
+	  fprintf_unfiltered (gdb_stderr, "%s: name too long\n", name);
+	  errno = EINVAL;
+	  return -1;
+	}
+
+      sockaddru.sun_family = AF_UNIX;
+      strcpy(sockaddru.sun_path, name);
+      socklen = SUN_LEN(&sockaddru);
+#ifdef HAVE_STRUCT_SOCKADDR_UN_SUN_LEN
+      sockaddru.sun_len = socklen;
+#endif
+      sockaddrp = (struct sockaddr *)&sockaddru;
+#else
+      fprintf_unfiltered (gdb_stderr, "%s: socket type not supported\n", name);
+      errno = EINVAL;
       return -1;
+#endif /* HAVE_SYS_UN_H */
     }
+  else
+    error ("net_open: invalid mode!");
 
-  if (use_udp)
+  switch (mode) {
+  case USE_UDP: 
     scb->fd = socket (PF_INET, SOCK_DGRAM, 0);
-  else
+    break;
+  case USE_TCP:
     scb->fd = socket (PF_INET, SOCK_STREAM, 0);
+    break;
+  case USE_LOCAL:
+    scb->fd = socket (PF_UNIX, SOCK_STREAM, 0);
+    break;
+  }
 
   if (scb->fd < 0)
     return -1;
   
-  sockaddr.sin_family = PF_INET;
-  sockaddr.sin_port = htons (port);
-  memcpy (&sockaddr.sin_addr.s_addr, hostent->h_addr,
-	  sizeof (struct in_addr));
-
   /* set socket nonblocking */
   tmp = 1;
   ioctl (scb->fd, FIONBIO, &tmp);
 
   /* Use Non-blocking connect.  connect() will return 0 if connected already. */
-  n = connect (scb->fd, (struct sockaddr *) &sockaddr, sizeof (sockaddr));
+  n = connect (scb->fd, sockaddrp, socklen);
 
   if (n < 0 && errno != EINPROGRESS)
     {
@@ -179,7 +242,7 @@
   tmp = 0;
   ioctl (scb->fd, FIONBIO, &tmp);
 
-  if (use_udp == 0)
+  if (mode == USE_TCP)
     {
       /* Disable Nagle algorithm. Needed in some cases. */
       tmp = 1;

