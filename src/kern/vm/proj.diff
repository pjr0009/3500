diff --git a/root/hostlib/libhostcompat.a b/root/hostlib/libhostcompat.a
index 2c9b54d..2f18976 100644
Binary files a/root/hostlib/libhostcompat.a and b/root/hostlib/libhostcompat.a differ
diff --git a/root/include/kern/types.h b/root/include/kern/types.h
index b2933df..119254b 100644
--- a/root/include/kern/types.h
+++ b/root/include/kern/types.h
@@ -11,4 +11,5 @@ typedef int32_t off_t;   /* Offset within file */
 typedef int32_t pid_t;   /* Process ID */
 typedef int32_t time_t;  /* Time in seconds */
 
+
 #endif /* _KERN_TYPES_H_ */
diff --git a/root/kernel b/root/kernel
index 8ce7162..2be3227 120000
--- a/root/kernel
+++ b/root/kernel
@@ -1 +1 @@
-kernel-ASST0
\ No newline at end of file
+kernel-ASST3
\ No newline at end of file
diff --git a/root/kernel-ASST3 b/root/kernel-ASST3
new file mode 100755
index 0000000..00f2dcd
Binary files /dev/null and b/root/kernel-ASST3 differ
diff --git a/root/lib/libc.a b/root/lib/libc.a
index 01aa01b..a630ea1 100644
Binary files a/root/lib/libc.a and b/root/lib/libc.a differ
diff --git a/root/swapfile b/root/swapfile
new file mode 100644
index 0000000..e69de29
diff --git a/root/testbin/add b/root/testbin/add
index dd0c3ab..9d62154 100755
Binary files a/root/testbin/add and b/root/testbin/add differ
diff --git a/src/kern/arch/mips/conf/conf.arch b/src/kern/arch/mips/conf/conf.arch
index ca2a23f..016b53b 100644
--- a/src/kern/arch/mips/conf/conf.arch
+++ b/src/kern/arch/mips/conf/conf.arch
@@ -33,6 +33,9 @@ file        lib/copyinout.c			# copyin/out et al.
 defoption   dumbvm
 optfile     dumbvm  arch/mips/mips/dumbvm.c
 
+file arch/mips/mips/coremap.c
+
+
 #
 # Get the files and options for LAMEbus devices.
 #
diff --git a/src/kern/arch/mips/include/coremap.h b/src/kern/arch/mips/include/coremap.h
new file mode 100644
index 0000000..721e620
--- /dev/null
+++ b/src/kern/arch/mips/include/coremap.h
@@ -0,0 +1,64 @@
+#ifndef _COREMAP_H_
+#define _COREMAP_H_
+
+#include <types.h>
+#include <kern/errno.h>
+#include <lib.h>
+#include <thread.h>
+#include <curthread.h>
+#include <addrspace.h>
+#include <vm.h>
+#include <lpage.h>
+#include <machine/spl.h>
+#include <machine/tlb.h>
+#include <synch.h>
+
+#define COREMAP_TO_PADDR(i)	(((paddr_t)PAGE_SIZE)*((i)+base_coremap_page))
+#define PADDR_TO_COREMAP(page)	(((page)/PAGE_SIZE) - base_coremap_page)
+
+// state of the coremap entry, spefices if it should ever be swapped out or written to disk
+typedef enum {
+	DIRTY,
+	CLEAN,
+	FIXED
+} cm_state;
+
+
+struct coremap_entry { 
+	struct lpage *cm_lp; /* logical page we hold */
+	int cm_tlbix:7; /* tlb index number, or -1 */ 
+	unsigned cm_kernel:1,/* true if kernel page */ 
+	cm_notlast:1,/* true not last in sequence of kernel pages */ 
+	cm_allocated:1;  /* true if page in use */ 
+	volatile unsigned cm_pinned:1; /*true if page is busy*/ 
+};
+
+static u_int32_t num_coremap_entries;
+static u_int32_t num_coremap_free;
+static u_int32_t base_coremap_page;
+
+// coremap array
+static struct coremap_entry *coremap;
+static struct semaphore *global_paging_lock;
+static int vm_bootstrapped;
+
+/* pages allocated to the kernel */ 
+static u_int32_t num_coremap_kernel; 
+
+/* pages allocated to user progs */ 
+static u_int32_t num_coremap_user;
+
+
+//functions
+void coremap_bootstrap(void);
+
+paddr_t coremap_alloc_multipages(int npages);
+paddr_t coremap_alloc_page(struct lpage *lp, int dopin);
+
+void  coremap_free_multipages(int npages);
+void  coremap_free_page();
+
+paddr_t coremap_allocuser(struct lpage *lp);
+void coremap_zero_page(paddr_t paddr);
+
+#endif
\ No newline at end of file
diff --git a/src/kern/arch/mips/include/vm.h b/src/kern/arch/mips/include/vm.h
index 8d4fca2..e99fcd4 100644
--- a/src/kern/arch/mips/include/vm.h
+++ b/src/kern/arch/mips/include/vm.h
@@ -54,6 +54,9 @@ typedef u_int32_t vaddr_t;   /* type for a virtual address */
  * grows downwards.
  */
 #define USERSTACK   USERTOP
+#define USERSTACKSIZE (512*PAGE_SIZE)
+#define USERSTACKSIZE	(512*PAGE_SIZE)
+#define USERSTACKBASE	(USERSTACK-USERSTACKSIZE)
 
 /*
  * Interface to the low-level module that looks after the amount of
diff --git a/src/kern/arch/mips/mips/coremap.c b/src/kern/arch/mips/mips/coremap.c
new file mode 100644
index 0000000..d1f856a
--- /dev/null
+++ b/src/kern/arch/mips/mips/coremap.c
@@ -0,0 +1,157 @@
+#include <machine/coremap.h>
+
+void coremap_bootstrap(void) {
+	paddr_t first, last;
+	u_int32_t coremap_size;
+	int num_of_pages, i;
+
+	DEBUG(DB_VM, "\n\nCOREMAP BOOTSTRAP \n");
+
+
+	ram_getsize(&first, &last);
+
+	num_of_pages = (last - first) / PAGE_SIZE;
+
+	global_paging_lock = lock_create("global_paging_lock");
+	
+
+
+	coremap_size = num_of_pages * sizeof(struct coremap_entry);
+	coremap_size = ROUNDUP(coremap_size, PAGE_SIZE);
+
+	// Coremap is an array which is indexed by its physical address.
+	// stealing memory for coremap itself. 
+	coremap = (struct coremap_entry *) PADDR_TO_KVADDR(first);
+
+	// Get base coremap page
+	base_coremap_page = first / PAGE_SIZE;
+
+	// Get last coremap page
+	num_coremap_entries = (last - first) / PAGE_SIZE;
+	// not sure what these should be (yet).
+	num_coremap_kernel = 0;
+	num_coremap_user = 0;
+	num_coremap_free = num_coremap_entries;
+
+	// initialize each entry
+	for (i=0; i < num_coremap_entries; i++) {
+		coremap[i].cm_kernel = 0; 
+		coremap[i].cm_notlast = 1;
+		coremap[i].cm_allocated = 0;
+		coremap[i].cm_pinned = 0; 
+		coremap[i].cm_tlbix = 1; 
+		coremap[i].cm_lp = NULL;
+	}
+	DEBUG(DB_VM, "Number of pages: %d \n", num_of_pages);
+	DEBUG(DB_VM, "coremap_size : %d \n", coremap_size);
+	DEBUG(DB_VM, "Number of coremap entries: %d \n", num_coremap_entries);
+	DEBUG(DB_VM, "COREMAP BOOTSTRAP SUCCESS! \n \n", num_coremap_entries);
+
+
+	vm_bootstrapped = 1;
+}	
+
+paddr_t coremap_alloc_multipages(int npages){
+	return (paddr_t)npages;
+};
+
+void coremap_free_multipages(int npages){
+	(void)npages;
+};
+
+
+//using this for when malloc is called before coremap has been bootstrapped.
+static paddr_t getppages(unsigned long npages)
+{
+	int spl;
+	paddr_t addr;
+
+	spl = splhigh();
+
+	addr = ram_stealmem(npages);
+	
+	splx(spl);
+	return addr;
+}
+
+
+// this works because we return the physical address. the coremap is an array indexed
+// by its physical address whose value returns the virtual address
+paddr_t coremap_alloc_page(struct lpage *lp, int dopin){
+	
+	if(vm_bootstrapped != 1){
+		return getppages(1);
+	} 
+	//otherwise we have coremap initialized and have global paging lock initialized.
+	int i;
+	int candidate = -1;
+	
+	// critical section
+	lock_acquire(global_paging_lock);
+	DEBUG(DB_VM, "\nAllocating page");
+
+	if(num_coremap_free > 0){
+		
+		// find a coremap entry candidate
+		for(i=0; i < num_coremap_entries; i++){
+			if(coremap[i].cm_pinned || coremap[i].cm_allocated || coremap[i].cm_kernel){
+				continue;
+			}
+			else{
+				candidate = i;
+				break;
+			}
+		}
+
+		// check candidate and allocate it accordingly, returning the physical address for the tlb?
+		if(candidate == -1 /* and not in interrupt */){
+			DEBUG(DB_VM, "\nNeed to evict and swap out victim\n");
+			return INVALID_PADDR; /*for now*/
+			/* page swap; evict someone */
+		} else if (candidate < 0){
+			DEBUG(DB_VM, "\nNo valid coremap entry found!!\n");
+			lock_release(global_paging_lock);
+			return INVALID_PADDR;
+		} else {
+			DEBUG(DB_VM, "\nCoremap entry %d being allocated\n" , candidate);
+			/* found a free coremap entry */
+			coremap[candidate].cm_allocated = 1;
+			coremap[candidate].cm_lp = lp;
+			coremap[candidate].cm_pinned = dopin;
+
+			lock_release(global_paging_lock);
+			
+			// check if it's a kernel entry
+			if(lp == NULL){
+				coremap[candidate].cm_kernel = 1;
+				num_coremap_kernel += 1;
+			} else {
+				num_coremap_user += 1;
+			}
+			return COREMAP_TO_PADDR(candidate);
+		}
+	}
+	DEBUG(DB_VM, "\nNO COREMAP ENTRIES FREE\n");
+	return INVALID_PADDR;
+};
+
+void coremap_free_page(){
+
+}
+
+paddr_t coremap_allocuser(struct lpage *lp) {
+	// KASSERT(!curthread->t_in_interrupt);
+	DEBUG(DB_VM, "\nalloc user page");
+
+	return coremap_alloc_page(lp, 1 /* dopin */);
+}
+
+void coremap_zero_page(paddr_t paddr){
+	vaddr_t va;
+
+	// KASSERT(coremap_pageispinned(paddr));
+
+	va = PADDR_TO_KVADDR(paddr);
+	bzero((char *)va, PAGE_SIZE);
+}
+
diff --git a/src/kern/arch/mips/mips/trap.c b/src/kern/arch/mips/mips/trap.c
index 30fca6f..31ae1c1 100644
--- a/src/kern/arch/mips/mips/trap.c
+++ b/src/kern/arch/mips/mips/trap.c
@@ -115,16 +115,19 @@ mips_trap(struct trapframe *tf)
 	 */
 	switch (code) {
 	case EX_MOD:
+		DEBUG(DB_VM, "\nTLB READ ONLY MISS FOR VADDR: %d", tf -> tf_vaddr);
 		if (vm_fault(VM_FAULT_READONLY, tf->tf_vaddr)==0) {
 			goto done;
 		}
 		break;
 	case EX_TLBL:
+		DEBUG(DB_VM, "\nTLB READ MISS FOR VADDR: %d", tf -> tf_vaddr);
 		if (vm_fault(VM_FAULT_READ, tf->tf_vaddr)==0) {
 			goto done;
 		}
 		break;
 	case EX_TLBS:
+		DEBUG(DB_VM, "\nTLB MISS WHILE TRYING TO WRITE TO VIRTUAL ADDRESS: %d CALLING VM FAULT", tf -> tf_vaddr);
 		if (vm_fault(VM_FAULT_WRITE, tf->tf_vaddr)==0) {
 			goto done;
 		}
diff --git a/src/kern/compile/ASST2/Makefile b/src/kern/compile/ASST2/Makefile
new file mode 100644
index 0000000..266ee72
--- /dev/null
+++ b/src/kern/compile/ASST2/Makefile
@@ -0,0 +1,197 @@
+# Automatically generated by config.
+# Edit arch/mips/conf/Makefile.mips instead, and rerun config.
+#
+
+#
+#
+# Makefile.mips
+#
+# OS/161 kernel makefile base for the MIPS r2000/r3000.
+#
+# The actual makefiles used are copies of this file - if you want to edit,
+# edit kern/arch/mips/conf/Makefile.mips and rerun config.
+#
+
+
+#
+# Filename for the kernel.
+#
+KERNEL=kernel
+
+#
+# Get the defs that were dumped out from the kernel config tool.
+# This defines:
+#	S		Path for top of kernel source tree
+#	ARCH		Architecture ("mips")
+#	DEBUGFLAGS	-O2 or -g
+#	CONFNAME	The name of the kernel config, e.g., ASST1
+#
+include defs.mk
+
+#
+# Get the tree-wide defs.
+# This defines (that we use):
+#	OSTREE		Path for top of installed system tree
+#	CC		C compiler
+#	KCFLAGS		C compiler flags for kernel
+#	LD		Linker
+#	KLDFLAGS	Linker flags for kernel
+#	SIZE		Object file size tool
+#
+include $S/../defs.mk
+
+#
+# Adjust defs for building the kernel.
+#
+# The LOAD_ADDRESS is the virtual address where the kernel will be loaded
+# into memory. This is in the direct-mapped cached segment of the MIPS
+# address space. -Ttext is the linker option for setting it.
+#
+# -T provides the linker with a "linker script". This is a piece of
+# obscure mumble that tells the linker how to put together the output
+# program. The only reason we need it is that the linker breaks if you
+# try to use -Ttext and its default built-in linker script at the same
+# time.
+#
+# -nostdinc prevents including header files other than our own, and 
+# -nostdlib prevents linking against any standard libraries. Because
+# the kernel has to be a completely standalone program, this is important.
+#
+# -ffreestanding tells gcc this is not an ordinary program, so it will
+# make fewer unwise assumptions about standard library functions.
+#
+# We define _KERNEL so certain source files that are shared between the
+# kernel and userland (like strcpy.c) can tell the difference so they know
+# which header files to use.
+#
+# -G 0 tells the assembler and linker not to reference global variables
+# via the "global pointer" (MIPS gp register) because we don't support 
+# handling the gp register.
+#
+LOAD_ADDRESS=0x80001000
+INCLUDES=-nostdinc -I$S/include -I$S/dev -I. 
+CFLAGS=$(KCFLAGS) $(DEBUGFLAGS) $(INCLUDES) -ffreestanding -D_KERNEL -G 0
+LDFLAGS=$(KLDFLAGS) -nostdlib \
+	-Ttext $(LOAD_ADDRESS) -T $S/arch/mips/conf/ldscript \
+	-G 0
+
+#
+# Rules for compiling various kinds of source files, by suffix.
+# (There's nothing magical about these names and make.)
+#
+# We don't actually use C++ in OS/161, although, with some fiddling,
+# you might be able to. But you must turn off exceptions and RTTI in
+# order to do so (the implementations of these in gcc are completely 
+# unsuitable for kernels.)
+#
+COMPILE.cc=$(CC) $(CFLAGS) -fno-rtti -fno-exceptions -c
+COMPILE.c=$(CC) $(CFLAGS) -c
+COMPILE.l=false   # redefine when needed 
+COMPILE.y=false   # redefine when needed 
+COMPILE.S=$(CC) $(CFLAGS) -c
+
+#
+# This should expand to all the header files in the kernel so they can
+# be fed to tags.
+#
+TAGS_HEADERS=$S/include/*.h $S/include/kern/*.h $S/arch/$(ARCH)/include/*.h
+
+#
+# Default make rule: build the kernel.
+#
+all: $(KERNEL)
+
+#
+# Here's how we link the kernel. 
+#
+# vers.c/.o is generated on every build. It contains a numeric serial
+# number incremented every time newvers.sh is run.  These values are
+# printed out by newvers.sh and are also displayed at boot time. This
+# makes it possible to tell at a glance whether you're actually
+# running the same kernel you just compiled.
+#
+# The version number is kept in the file called "version" in the build
+# directory.
+#
+# By immemorial tradition, "size" is run on the kernel after it's linked.
+#
+$(KERNEL):
+	$S/conf/newvers.sh $(CONFNAME)
+	$(COMPILE.c) vers.c
+	$(LD) $(LDFLAGS) $(OBJS) vers.o -o $(KERNEL)
+	$(SIZE) $(KERNEL)
+
+#
+# Use the -M argument to gcc to get it to output dependency information.
+# Note that we use -M, which includes deps for #include <...> files,
+# rather than -MM, which doesn't. This is because we are the operating
+# system: the #include <...> files are part of our project - in fact, in
+# the kernel they're the kernel's own include files - and they will be
+# changing!
+#
+depend:
+	$(CC) $(CFLAGS) -M $(SRCS) > depend.mk
+
+#
+# Remove everything generated during the compile.
+# (To remove absolutely everything automatically generated, you can just
+# blow away the whole compile directory.)
+#
+clean:
+	rm -f *.o *.a tags $(KERNEL)
+
+#
+# Rerun config for this configuration.
+#
+reconfig:
+	(cd ../../conf && ./config $(CONFNAME))
+
+#
+# [ -d $(OSTREE) ] succeeds if $(OSTREE) is a directory.
+# (See test(1).) Thus, if $(OSTREE) doesn't exist, it will be created.
+#
+
+# The kernel gets installed at the top of the installed system tree.
+# Since with OS/161 it's relatively likely that you'll be working with
+# several configurations at once, it gets installed under the name of
+# this config, and a symbolic link with the "real" name is set up to
+# point to the last kernel installed.
+#
+install:
+	[ -d $(OSTREE) ] || mkdir $(OSTREE)
+	cp $(KERNEL) $(OSTREE)/$(KERNEL)-$(CONFNAME)
+	-rm -f $(OSTREE)/$(KERNEL)
+	ln -s $(KERNEL)-$(CONFNAME) $(OSTREE)/$(KERNEL)
+
+#
+# Run tags on all the sources and header files. This is probably not
+# the most useful way to do this and needs attention. (XXX)
+#
+tags:
+	ctags -wtd $(SRCS) $(TAGS_HEADERS)
+
+#
+# This tells make that these rules are not files so it (hopefully)
+# won't become confused if files by those names appear.
+#
+.PHONY: all depend clean install tags reconfig
+
+#
+# Get the list of source files from where it was generated by the 
+# kernel config tool.
+#
+# This sets SRCS and OBJS, and also defines a rule for compiling each
+# source file.
+#
+include files.mk
+
+# Get dependency information.
+include depend.mk
+
+#
+# Tell make that the kernel depends on the object files listed in $(OBJS).
+# This (unlike the link commands that also use $(OBJS) above) must come
+# after the include of files.mk, because of the way make reads its input
+# and evaluates variables.
+#
+$(KERNEL): $(OBJS)
--- /dev/null
+++ b/src/kern/compile/ASST2/autoconf.c
@@ -0,0 +1,455 @@
+/* Automatically generated; do not edit */
+#include <types.h>
+#include <lib.h>
+#include "autoconf.h"
+
+static void autoconf_beep(struct beep_softc *, int);
+static void autoconf_con(struct con_softc *, int);
+static void autoconf_emu(struct emu_softc *, int);
+static void autoconf_lhd(struct lhd_softc *, int);
+static void autoconf_lrandom(struct lrandom_softc *, int);
+static void autoconf_lser(struct lser_softc *, int);
+static void autoconf_ltimer(struct ltimer_softc *, int);
+static void autoconf_ltrace(struct ltrace_softc *, int);
+static void autoconf_pseudorand(struct pseudorand_softc *, int);
+static void autoconf_random(struct random_softc *, int);
+static void autoconf_rtclock(struct rtclock_softc *, int);
+static int nextunit_beep;
+static int nextunit_con;
+static int nextunit_emu;
+static int nextunit_lhd;
+static int nextunit_lrandom;
+static int nextunit_lser;
+static int nextunit_ltimer;
+static int nextunit_ltrace;
+static int nextunit_random;
+static int nextunit_rtclock;
+
+static
+int
+tryattach_emu_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct emu_softc *dev;
+	int result;
+
+	dev = attach_emu_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("emu%d at lamebus%d", devunit, busunit);
+	result = config_emu(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_emu = devunit+1;
+	autoconf_emu(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_ltrace_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct ltrace_softc *dev;
+	int result;
+
+	dev = attach_ltrace_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("ltrace%d at lamebus%d", devunit, busunit);
+	result = config_ltrace(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_ltrace = devunit+1;
+	autoconf_ltrace(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_ltimer_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct ltimer_softc *dev;
+	int result;
+
+	dev = attach_ltimer_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("ltimer%d at lamebus%d", devunit, busunit);
+	result = config_ltimer(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_ltimer = devunit+1;
+	autoconf_ltimer(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_lrandom_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct lrandom_softc *dev;
+	int result;
+
+	dev = attach_lrandom_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("lrandom%d at lamebus%d", devunit, busunit);
+	result = config_lrandom(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_lrandom = devunit+1;
+	autoconf_lrandom(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_lhd_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct lhd_softc *dev;
+	int result;
+
+	dev = attach_lhd_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("lhd%d at lamebus%d", devunit, busunit);
+	result = config_lhd(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_lhd = devunit+1;
+	autoconf_lhd(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_lser_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct lser_softc *dev;
+	int result;
+
+	dev = attach_lser_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("lser%d at lamebus%d", devunit, busunit);
+	result = config_lser(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_lser = devunit+1;
+	autoconf_lser(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_beep_to_ltimer(int devunit, struct ltimer_softc *bus, int busunit)
+{
+	struct beep_softc *dev;
+	int result;
+
+	dev = attach_beep_to_ltimer(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("beep%d at ltimer%d", devunit, busunit);
+	result = config_beep(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_beep = devunit+1;
+	autoconf_beep(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_con_to_lser(int devunit, struct lser_softc *bus, int busunit)
+{
+	struct con_softc *dev;
+	int result;
+
+	dev = attach_con_to_lser(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("con%d at lser%d", devunit, busunit);
+	result = config_con(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_con = devunit+1;
+	autoconf_con(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_rtclock_to_ltimer(int devunit, struct ltimer_softc *bus, int busunit)
+{
+	struct rtclock_softc *dev;
+	int result;
+
+	dev = attach_rtclock_to_ltimer(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("rtclock%d at ltimer%d", devunit, busunit);
+	result = config_rtclock(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_rtclock = devunit+1;
+	autoconf_rtclock(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_random_to_lrandom(int devunit, struct lrandom_softc *bus, int busunit)
+{
+	struct random_softc *dev;
+	int result;
+
+	dev = attach_random_to_lrandom(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("random%d at lrandom%d", devunit, busunit);
+	result = config_random(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_random = devunit+1;
+	autoconf_random(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_random_to_pseudorand(int devunit, struct pseudorand_softc *bus, int busunit)
+{
+	struct random_softc *dev;
+	int result;
+
+	dev = attach_random_to_pseudorand(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("random%d at pseudorand%d", devunit, busunit);
+	result = config_random(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_random = devunit+1;
+	autoconf_random(dev, devunit);
+	return 0;
+}
+
+
+static
+void
+autoconf_lhd(struct lhd_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_random(struct random_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_rtclock(struct rtclock_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_emu(struct emu_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+void
+autoconf_pseudorand(struct pseudorand_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+	if (busunit==0) {
+		if (nextunit_random <= 0) {
+			tryattach_random_to_pseudorand(0, bus, busunit);
+		}
+	}
+}
+
+static
+void
+autoconf_ltrace(struct ltrace_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_con(struct con_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+void
+autoconf_lamebus(struct lamebus_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+	{
+		int result, devunit=nextunit_emu;
+		do {
+			result = tryattach_emu_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+	{
+		int result, devunit=nextunit_ltrace;
+		do {
+			result = tryattach_ltrace_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+	{
+		int result, devunit=nextunit_ltimer;
+		do {
+			result = tryattach_ltimer_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+	{
+		int result, devunit=nextunit_lrandom;
+		do {
+			result = tryattach_lrandom_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+	{
+		int result, devunit=nextunit_lhd;
+		do {
+			result = tryattach_lhd_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+	{
+		int result, devunit=nextunit_lser;
+		do {
+			result = tryattach_lser_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+}
+
+static
+void
+autoconf_beep(struct beep_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_lser(struct lser_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+	{
+		if (nextunit_con <= 0) {
+			tryattach_con_to_lser(0, bus, busunit);
+		}
+	}
+}
+
+static
+void
+autoconf_lrandom(struct lrandom_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+	{
+		if (nextunit_random <= 0) {
+			tryattach_random_to_lrandom(0, bus, busunit);
+		}
+	}
+}
+
+static
+void
+autoconf_ltimer(struct ltimer_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+	{
+		if (nextunit_beep <= 0) {
+			tryattach_beep_to_ltimer(0, bus, busunit);
+		}
+	}
+	{
+		if (nextunit_rtclock <= 0) {
+			tryattach_rtclock_to_ltimer(0, bus, busunit);
+		}
+	}
+}
+
+void
+pseudoconfig(void)
+{
+	{
+		struct pseudorand_softc *s;
+		
+		s = pseudoattach_pseudorand(0);
+		if (s!=NULL) {
+			kprintf("pseudorand0 (virtual)\n");
+			autoconf_pseudorand(s, 0);
+		}
+	}
+}
+
diff --git a/src/kern/compile/ASST2/autoconf.h b/src/kern/compile/ASST2/autoconf.h
new file mode 100644
index 0000000..13ab76c
--- /dev/null
+++ b/src/kern/compile/ASST2/autoconf.h
@@ -0,0 +1,48 @@
+/* Automatically generated; do not edit */
+#ifndef _AUTOCONF_H_
+#define _AUTOCONF_H_
+
+struct lamebus_softc;
+struct emu_softc;
+struct ltrace_softc;
+struct ltimer_softc;
+struct lrandom_softc;
+struct lhd_softc;
+struct lser_softc;
+struct beep_softc;
+struct con_softc;
+struct rtclock_softc;
+struct random_softc;
+struct pseudorand_softc;
+struct random_softc;
+
+void autoconf_lamebus(struct lamebus_softc *dev, int unit);
+
+struct emu_softc *attach_emu_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct ltrace_softc *attach_ltrace_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct ltimer_softc *attach_ltimer_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct lrandom_softc *attach_lrandom_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct lhd_softc *attach_lhd_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct lser_softc *attach_lser_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct beep_softc *attach_beep_to_ltimer(int devunit, struct ltimer_softc *bus);
+struct con_softc *attach_con_to_lser(int devunit, struct lser_softc *bus);
+struct rtclock_softc *attach_rtclock_to_ltimer(int devunit, struct ltimer_softc *bus);
+struct random_softc *attach_random_to_lrandom(int devunit, struct lrandom_softc *bus);
+struct pseudorand_softc *pseudoattach_pseudorand(int devunit);
+struct random_softc *attach_random_to_pseudorand(int devunit, struct pseudorand_softc *bus);
+
+int config_emu(struct emu_softc *dev, int unit);
+int config_ltrace(struct ltrace_softc *dev, int unit);
+int config_ltimer(struct ltimer_softc *dev, int unit);
+int config_lrandom(struct lrandom_softc *dev, int unit);
+int config_lhd(struct lhd_softc *dev, int unit);
+int config_lser(struct lser_softc *dev, int unit);
+int config_beep(struct beep_softc *dev, int unit);
+int config_con(struct con_softc *dev, int unit);
+int config_rtclock(struct rtclock_softc *dev, int unit);
+int config_random(struct random_softc *dev, int unit);
+int config_random(struct random_softc *dev, int unit);
+
+void pseudoconfig(void);
+
+#endif /* _AUTOCONF_H_ */
diff --git a/src/kern/compile/ASST2/autoconf.o b/src/kern/compile/ASST2/autoconf.o
new file mode 100644
index 0000000..f3ab3f7
Binary files /dev/null and b/src/kern/compile/ASST2/autoconf.o differ
diff --git a/src/kern/compile/ASST2/beep.o b/src/kern/compile/ASST2/beep.o
new file mode 100644
index 0000000..ddaf3c5
Binary files /dev/null and b/src/kern/compile/ASST2/beep.o differ
diff --git a/src/kern/compile/ASST2/beep_ltimer.o b/src/kern/compile/ASST2/beep_ltimer.o
new file mode 100644
index 0000000..862e901
Binary files /dev/null and b/src/kern/compile/ASST2/beep_ltimer.o differ
diff --git a/src/kern/compile/ASST2/bitmap.o b/src/kern/compile/ASST2/bitmap.o
new file mode 100644
index 0000000..8bf0c38
Binary files /dev/null and b/src/kern/compile/ASST2/bitmap.o differ
diff --git a/src/kern/compile/ASST2/bitmaptest.o b/src/kern/compile/ASST2/bitmaptest.o
new file mode 100644
index 0000000..331c0a8
Binary files /dev/null and b/src/kern/compile/ASST2/bitmaptest.o differ
diff --git a/src/kern/compile/ASST2/bzero.o b/src/kern/compile/ASST2/bzero.o
new file mode 100644
index 0000000..bca68da
Binary files /dev/null and b/src/kern/compile/ASST2/bzero.o differ
diff --git a/src/kern/compile/ASST2/cache_mips1.o b/src/kern/compile/ASST2/cache_mips1.o
new file mode 100644
index 0000000..8f642dd
Binary files /dev/null and b/src/kern/compile/ASST2/cache_mips1.o differ
diff --git a/src/kern/compile/ASST2/close.o b/src/kern/compile/ASST2/close.o
new file mode 100644
index 0000000..03ea58b
Binary files /dev/null and b/src/kern/compile/ASST2/close.o differ
diff --git a/src/kern/compile/ASST2/con_lser.o b/src/kern/compile/ASST2/con_lser.o
new file mode 100644
index 0000000..ab659af
Binary files /dev/null and b/src/kern/compile/ASST2/con_lser.o differ
diff --git a/src/kern/compile/ASST2/console.o b/src/kern/compile/ASST2/console.o
new file mode 100644
index 0000000..9f2ee45
Binary files /dev/null and b/src/kern/compile/ASST2/console.o differ
diff --git a/src/kern/compile/ASST2/copyinout.o b/src/kern/compile/ASST2/copyinout.o
new file mode 100644
index 0000000..ec94058
Binary files /dev/null and b/src/kern/compile/ASST2/copyinout.o differ
diff --git a/src/kern/compile/ASST2/defs.mk b/src/kern/compile/ASST2/defs.mk
new file mode 100644
index 0000000..25998b2
--- /dev/null
+++ b/src/kern/compile/ASST2/defs.mk
@@ -0,0 +1,5 @@
+# Automatically generated by config; do not edit
+S=../..
+ARCH=mips
+DEBUGFLAGS=-g
+CONFNAME=ASST2
diff --git a/src/kern/compile/ASST2/depend.mk b/src/kern/compile/ASST2/depend.mk
new file mode 100644
index 0000000..d40517b
--- /dev/null
+++ b/src/kern/compile/ASST2/depend.mk
@@ -0,0 +1,348 @@
+lhd.o: ../../dev/lamebus/lhd.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/synch.h ../../include/kern/errno.h machine/bus.h \
+  machine/vm.h ../../dev/lamebus/lamebus.h ../../include/uio.h \
+  ../../include/vfs.h ../../dev/lamebus/lhd.h ../../include/dev.h \
+  autoconf.h
+emu.o: ../../dev/lamebus/emu.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/kern/unistd.h ../../include/kern/stat.h \
+  ../../include/lib.h machine/setjmp.h ../../include/synch.h \
+  ../../include/array.h ../../include/uio.h ../../include/vfs.h \
+  ../../include/emufs.h ../../include/vnode.h ../../include/fs.h \
+  ../../dev/lamebus/emu.h machine/bus.h machine/vm.h \
+  ../../dev/lamebus/lamebus.h autoconf.h
+random.o: ../../dev/generic/random.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/kern/unistd.h ../../include/lib.h machine/setjmp.h \
+  ../../include/uio.h ../../include/vfs.h ../../dev/generic/random.h \
+  ../../include/dev.h autoconf.h
+rtclock.o: ../../dev/generic/rtclock.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../include/clock.h \
+  opt-synchprobs.h ../../dev/generic/rtclock.h autoconf.h
+pseudorand.o: ../../dev/generic/pseudorand.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/uio.h ../../dev/generic/pseudorand.h \
+  autoconf.h
+ltrace.o: ../../dev/lamebus/ltrace.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h machine/bus.h machine/vm.h ../../dev/lamebus/lamebus.h \
+  ../../dev/lamebus/ltrace.h autoconf.h
+lamebus.o: ../../dev/lamebus/lamebus.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h machine/spl.h ../../dev/lamebus/lamebus.h
+console.o: ../../dev/generic/console.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h machine/spl.h \
+  ../../include/synch.h ../../dev/generic/console.h ../../include/dev.h \
+  ../../include/vfs.h ../../include/uio.h autoconf.h
+lser.o: ../../dev/lamebus/lser.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  machine/spl.h machine/bus.h machine/vm.h ../../dev/lamebus/lamebus.h \
+  ../../dev/lamebus/lser.h autoconf.h
+beep.o: ../../dev/generic/beep.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../dev/generic/beep.h \
+  autoconf.h
+lrandom.o: ../../dev/lamebus/lrandom.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/uio.h machine/bus.h machine/vm.h \
+  ../../dev/lamebus/lamebus.h ../../dev/lamebus/lrandom.h autoconf.h
+ltimer.o: ../../dev/lamebus/ltimer.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/clock.h opt-synchprobs.h machine/bus.h \
+  machine/vm.h ../../dev/lamebus/lamebus.h ../../dev/lamebus/ltimer.h \
+  autoconf.h
+rtclock_ltimer.o: ../../dev/lamebus/rtclock_ltimer.c \
+  ../../include/types.h machine/types.h ../../include/kern/types.h \
+  ../../include/lib.h machine/setjmp.h ../../dev/generic/rtclock.h \
+  ../../dev/lamebus/ltimer.h autoconf.h
+emu_att.o: ../../dev/lamebus/emu_att.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../dev/lamebus/lamebus.h ../../dev/lamebus/emu.h \
+  autoconf.h
+random_lrandom.o: ../../dev/lamebus/random_lrandom.c \
+  ../../include/types.h machine/types.h ../../include/kern/types.h \
+  ../../include/lib.h machine/setjmp.h ../../dev/generic/random.h \
+  ../../include/dev.h ../../dev/lamebus/lrandom.h autoconf.h
+beep_ltimer.o: ../../dev/lamebus/beep_ltimer.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../dev/generic/beep.h ../../dev/lamebus/ltimer.h \
+  autoconf.h
+ltrace_att.o: ../../dev/lamebus/ltrace_att.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../dev/lamebus/lamebus.h ../../dev/lamebus/ltrace.h \
+  autoconf.h
+pseudorand_att.o: ../../dev/generic/pseudorand_att.c \
+  ../../include/types.h machine/types.h ../../include/kern/types.h \
+  ../../include/lib.h machine/setjmp.h ../../dev/generic/random.h \
+  ../../include/dev.h ../../dev/generic/pseudorand.h autoconf.h
+con_lser.o: ../../dev/lamebus/con_lser.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../dev/generic/console.h ../../dev/lamebus/lser.h \
+  autoconf.h
+lrandom_att.o: ../../dev/lamebus/lrandom_att.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../dev/lamebus/lamebus.h \
+  ../../dev/lamebus/lrandom.h autoconf.h
+lser_att.o: ../../dev/lamebus/lser_att.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../dev/lamebus/lamebus.h ../../dev/lamebus/lser.h \
+  autoconf.h
+lhd_att.o: ../../dev/lamebus/lhd_att.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../dev/lamebus/lamebus.h ../../dev/lamebus/lhd.h \
+  ../../include/dev.h autoconf.h
+ltimer_att.o: ../../dev/lamebus/ltimer_att.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../dev/lamebus/lamebus.h ../../dev/lamebus/ltimer.h \
+  autoconf.h
+sfs_io.o: ../../fs/sfs/sfs_io.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../include/uio.h \
+  ../../include/sfs.h ../../include/vnode.h ../../include/fs.h \
+  ../../include/kern/sfs.h ../../include/dev.h
+sfs_fs.o: ../../fs/sfs/sfs_fs.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/kern/errno.h ../../include/array.h ../../include/bitmap.h \
+  ../../include/uio.h ../../include/dev.h ../../include/sfs.h \
+  ../../include/vnode.h ../../include/fs.h ../../include/kern/sfs.h \
+  ../../include/vfs.h
+sfs_vnode.o: ../../fs/sfs/sfs_vnode.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/synch.h ../../include/array.h \
+  ../../include/bitmap.h ../../include/kern/stat.h \
+  ../../include/kern/errno.h ../../include/kern/unistd.h \
+  ../../include/uio.h ../../include/dev.h ../../include/sfs.h \
+  ../../include/vnode.h ../../include/fs.h ../../include/kern/sfs.h
+dumbvm.o: ../../arch/mips/mips/dumbvm.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../include/thread.h \
+  machine/pcb.h ../../include/curthread.h ../../include/addrspace.h \
+  ../../include/vm.h machine/vm.h opt-dumbvm.h machine/spl.h \
+  machine/tlb.h
+cache_mips1.o: ../../arch/mips/mips/cache_mips1.S machine/asmdefs.h
+exception.o: ../../arch/mips/mips/exception.S machine/asmdefs.h \
+  machine/specialreg.h
+lamebus_mips.o: ../../arch/mips/mips/lamebus_mips.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/kern/unistd.h \
+  ../../include/lib.h machine/setjmp.h ../../include/synch.h \
+  machine/spl.h machine/pcb.h ../../include/dev.h machine/bus.h \
+  machine/vm.h ../../dev/lamebus/lamebus.h autoconf.h
+interrupt.o: ../../arch/mips/mips/interrupt.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h machine/bus.h machine/vm.h ../../dev/lamebus/lamebus.h \
+  machine/spl.h machine/pcb.h
+pcb.o: ../../arch/mips/mips/pcb.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  machine/pcb.h machine/spl.h machine/switchframe.h \
+  ../../include/thread.h
+ram.o: ../../arch/mips/mips/ram.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/vm.h machine/vm.h machine/pcb.h
+spl.o: ../../arch/mips/mips/spl.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  machine/spl.h machine/specialreg.h
+start.o: ../../arch/mips/mips/start.S machine/asmdefs.h \
+  machine/specialreg.h
+switch.o: ../../arch/mips/mips/switch.S machine/asmdefs.h
+syscall.o: ../../arch/mips/mips/syscall.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h machine/pcb.h machine/spl.h \
+  machine/trapframe.h ../../include/kern/callno.h ../../include/syscall.h
+threadstart.o: ../../arch/mips/mips/threadstart.S machine/asmdefs.h
+trap.o: ../../arch/mips/mips/trap.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  machine/trapframe.h machine/specialreg.h machine/pcb.h machine/spl.h \
+  ../../include/vm.h machine/vm.h ../../include/thread.h \
+  ../../include/curthread.h
+tlb_mips1.o: ../../arch/mips/mips/tlb_mips1.S machine/asmdefs.h \
+  machine/specialreg.h
+mips-setjmp.o: ../../../lib/libc/mips-setjmp.S machine/asmdefs.h
+copyinout.o: ../../lib/copyinout.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h machine/pcb.h ../../include/vm.h \
+  machine/vm.h ../../include/thread.h ../../include/curthread.h
+array.o: ../../lib/array.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../include/array.h
+bitmap.o: ../../lib/bitmap.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/kern/errno.h ../../include/bitmap.h
+queue.o: ../../lib/queue.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../include/queue.h
+kheap.o: ../../lib/kheap.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/vm.h machine/vm.h machine/spl.h
+kprintf.o: ../../lib/kprintf.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/stdarg.h ../../include/lib.h \
+  machine/setjmp.h ../../include/kern/unistd.h ../../include/synch.h \
+  ../../include/vfs.h ../../include/thread.h machine/pcb.h machine/spl.h
+kgets.o: ../../lib/kgets.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h
+misc.o: ../../lib/misc.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errmsg.h \
+  ../../include/lib.h machine/setjmp.h
+ntoh.o: ../../lib/ntoh.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h
+__printf.o: ../../../lib/libc/__printf.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/stdarg.h
+snprintf.o: ../../../lib/libc/snprintf.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/stdarg.h
+atoi.o: ../../../lib/libc/atoi.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h
+bzero.o: ../../../lib/libc/bzero.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h
+memcpy.o: ../../../lib/libc/memcpy.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h
+memmove.o: ../../../lib/libc/memmove.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h
+strcat.o: ../../../lib/libc/strcat.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h
+strchr.o: ../../../lib/libc/strchr.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h
+strcmp.o: ../../../lib/libc/strcmp.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h
+strcpy.o: ../../../lib/libc/strcpy.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h
+strlen.o: ../../../lib/libc/strlen.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h
+strrchr.o: ../../../lib/libc/strrchr.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h
+strtok_r.o: ../../../lib/libc/strtok_r.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h
+init.o: ../../dev/init.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  machine/spl.h ../../include/dev.h autoconf.h
+device.o: ../../fs/vfs/device.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/synch.h ../../include/kern/errno.h \
+  ../../include/kern/unistd.h ../../include/kern/stat.h \
+  ../../include/vnode.h ../../include/uio.h ../../include/dev.h
+vfscwd.o: ../../fs/vfs/vfscwd.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/synch.h ../../include/kern/errno.h \
+  ../../include/kern/stat.h ../../include/vfs.h ../../include/fs.h \
+  ../../include/vnode.h ../../include/uio.h ../../include/thread.h \
+  machine/pcb.h ../../include/curthread.h
+vfslist.o: ../../fs/vfs/vfslist.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/synch.h ../../include/array.h ../../include/kern/errno.h \
+  ../../include/vfs.h ../../include/vnode.h ../../include/fs.h \
+  ../../include/dev.h
+vfslookup.o: ../../fs/vfs/vfslookup.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/kern/limits.h ../../include/lib.h machine/setjmp.h \
+  ../../include/synch.h ../../include/vfs.h ../../include/vnode.h \
+  ../../include/fs.h
+vfspath.o: ../../fs/vfs/vfspath.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/kern/limits.h ../../include/kern/unistd.h \
+  ../../include/vfs.h ../../include/vnode.h ../../include/lib.h \
+  machine/setjmp.h
+vnode.o: ../../fs/vfs/vnode.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../include/synch.h \
+  ../../include/vnode.h
+devnull.o: ../../fs/vfs/devnull.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../include/vfs.h \
+  ../../include/dev.h ../../include/uio.h
+hardclock.o: ../../thread/hardclock.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h machine/spl.h ../../include/thread.h machine/pcb.h \
+  ../../include/clock.h opt-synchprobs.h
+synch.o: ../../thread/synch.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/synch.h ../../include/thread.h machine/pcb.h \
+  ../../include/curthread.h machine/spl.h
+scheduler.o: ../../thread/scheduler.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/scheduler.h ../../include/thread.h \
+  machine/pcb.h machine/spl.h ../../include/queue.h
+thread.o: ../../thread/thread.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/kern/errno.h ../../include/array.h machine/spl.h \
+  machine/pcb.h ../../include/thread.h ../../include/curthread.h \
+  ../../include/scheduler.h ../../include/addrspace.h ../../include/vm.h \
+  machine/vm.h opt-dumbvm.h ../../include/vnode.h opt-synchprobs.h
+main.o: ../../main/main.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/kern/unistd.h ../../include/lib.h machine/setjmp.h \
+  machine/spl.h ../../include/test.h ../../include/synch.h \
+  ../../include/thread.h machine/pcb.h ../../include/scheduler.h \
+  ../../include/dev.h ../../include/vfs.h ../../include/vm.h machine/vm.h \
+  ../../include/syscall.h ../../include/version.h
+menu.o: ../../main/menu.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/kern/unistd.h ../../include/kern/limits.h \
+  ../../include/lib.h machine/setjmp.h ../../include/clock.h \
+  opt-synchprobs.h ../../include/thread.h machine/pcb.h \
+  ../../include/syscall.h ../../include/uio.h ../../include/vfs.h \
+  ../../include/sfs.h ../../include/vnode.h ../../include/fs.h \
+  ../../include/kern/sfs.h ../../include/test.h opt-synchprobs.h \
+  opt-sfs.h opt-net.h
+hello.o: ../../main/hello.c
+loadelf.o: ../../userprog/loadelf.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../include/uio.h \
+  ../../include/elf.h ../../include/addrspace.h ../../include/vm.h \
+  machine/vm.h opt-dumbvm.h ../../include/thread.h machine/pcb.h \
+  ../../include/curthread.h ../../include/vnode.h
+runprogram.o: ../../userprog/runprogram.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/kern/unistd.h \
+  ../../include/kern/errno.h ../../include/lib.h machine/setjmp.h \
+  ../../include/addrspace.h ../../include/vm.h machine/vm.h opt-dumbvm.h \
+  ../../include/thread.h machine/pcb.h ../../include/curthread.h \
+  ../../include/vfs.h ../../include/test.h
+uio.o: ../../userprog/uio.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/uio.h ../../include/thread.h machine/pcb.h \
+  ../../include/curthread.h
+arraytest.o: ../../test/arraytest.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/array.h ../../include/test.h
+bitmaptest.o: ../../test/bitmaptest.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/bitmap.h ../../include/test.h
+queuetest.o: ../../test/queuetest.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/queue.h ../../include/test.h
+threadtest.o: ../../test/threadtest.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/synch.h ../../include/thread.h \
+  machine/pcb.h ../../include/test.h
+tt3.o: ../../test/tt3.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  machine/spl.h ../../include/synch.h ../../include/thread.h \
+  machine/pcb.h ../../include/test.h opt-synchprobs.h
+synchtest.o: ../../test/synchtest.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/synch.h ../../include/thread.h machine/pcb.h \
+  ../../include/test.h ../../include/clock.h opt-synchprobs.h
+malloctest.o: ../../test/malloctest.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/synch.h ../../include/thread.h \
+  machine/pcb.h ../../include/test.h
+fstest.o: ../../test/fstest.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/kern/unistd.h ../../include/lib.h machine/setjmp.h \
+  ../../include/synch.h ../../include/fs.h ../../include/vnode.h \
+  ../../include/vfs.h ../../include/uio.h ../../include/test.h \
+  ../../include/thread.h machine/pcb.h
+autoconf.o: ../../compile/ASST2/autoconf.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../compile/ASST2/autoconf.h
diff --git a/src/kern/compile/ASST2/device.o b/src/kern/compile/ASST2/device.o
new file mode 100644
index 0000000..51c1b6a
Binary files /dev/null and b/src/kern/compile/ASST2/device.o differ
diff --git a/src/kern/compile/ASST2/devnull.o b/src/kern/compile/ASST2/devnull.o
new file mode 100644
index 0000000..0c19af1
Binary files /dev/null and b/src/kern/compile/ASST2/devnull.o differ
diff --git a/src/kern/compile/ASST2/dumbvm.o b/src/kern/compile/ASST2/dumbvm.o
new file mode 100644
index 0000000..b06d755
Binary files /dev/null and b/src/kern/compile/ASST2/dumbvm.o differ
diff --git a/src/kern/compile/ASST2/emu.o b/src/kern/compile/ASST2/emu.o
new file mode 100644
index 0000000..25b7d80
Binary files /dev/null and b/src/kern/compile/ASST2/emu.o differ
diff --git a/src/kern/compile/ASST2/emu_att.o b/src/kern/compile/ASST2/emu_att.o
new file mode 100644
index 0000000..4e45ffb
Binary files /dev/null and b/src/kern/compile/ASST2/emu_att.o differ
diff --git a/src/kern/compile/ASST2/exception.o b/src/kern/compile/ASST2/exception.o
new file mode 100644
index 0000000..5159ece
Binary files /dev/null and b/src/kern/compile/ASST2/exception.o differ
diff --git a/src/kern/compile/ASST2/execv.o b/src/kern/compile/ASST2/execv.o
new file mode 100644
index 0000000..c7ef366
Binary files /dev/null and b/src/kern/compile/ASST2/execv.o differ
diff --git a/src/kern/compile/ASST2/files.mk b/src/kern/compile/ASST2/files.mk
new file mode 100644
index 0000000..27512c3
--- /dev/null
+++ b/src/kern/compile/ASST2/files.mk
@@ -0,0 +1,451 @@
+# Automatically generated by config; do not edit
+lhd.o: ${S}/dev/lamebus/lhd.c
+	${COMPILE.c} ${S}/dev/lamebus/lhd.c
+SRCS+=${S}/dev/lamebus/lhd.c
+OBJS+=lhd.o
+
+emu.o: ${S}/dev/lamebus/emu.c
+	${COMPILE.c} ${S}/dev/lamebus/emu.c
+SRCS+=${S}/dev/lamebus/emu.c
+OBJS+=emu.o
+
+random.o: ${S}/dev/generic/random.c
+	${COMPILE.c} ${S}/dev/generic/random.c
+SRCS+=${S}/dev/generic/random.c
+OBJS+=random.o
+
+rtclock.o: ${S}/dev/generic/rtclock.c
+	${COMPILE.c} ${S}/dev/generic/rtclock.c
+SRCS+=${S}/dev/generic/rtclock.c
+OBJS+=rtclock.o
+
+pseudorand.o: ${S}/dev/generic/pseudorand.c
+	${COMPILE.c} ${S}/dev/generic/pseudorand.c
+SRCS+=${S}/dev/generic/pseudorand.c
+OBJS+=pseudorand.o
+
+ltrace.o: ${S}/dev/lamebus/ltrace.c
+	${COMPILE.c} ${S}/dev/lamebus/ltrace.c
+SRCS+=${S}/dev/lamebus/ltrace.c
+OBJS+=ltrace.o
+
+lamebus.o: ${S}/dev/lamebus/lamebus.c
+	${COMPILE.c} ${S}/dev/lamebus/lamebus.c
+SRCS+=${S}/dev/lamebus/lamebus.c
+OBJS+=lamebus.o
+
+console.o: ${S}/dev/generic/console.c
+	${COMPILE.c} ${S}/dev/generic/console.c
+SRCS+=${S}/dev/generic/console.c
+OBJS+=console.o
+
+lser.o: ${S}/dev/lamebus/lser.c
+	${COMPILE.c} ${S}/dev/lamebus/lser.c
+SRCS+=${S}/dev/lamebus/lser.c
+OBJS+=lser.o
+
+beep.o: ${S}/dev/generic/beep.c
+	${COMPILE.c} ${S}/dev/generic/beep.c
+SRCS+=${S}/dev/generic/beep.c
+OBJS+=beep.o
+
+lrandom.o: ${S}/dev/lamebus/lrandom.c
+	${COMPILE.c} ${S}/dev/lamebus/lrandom.c
+SRCS+=${S}/dev/lamebus/lrandom.c
+OBJS+=lrandom.o
+
+ltimer.o: ${S}/dev/lamebus/ltimer.c
+	${COMPILE.c} ${S}/dev/lamebus/ltimer.c
+SRCS+=${S}/dev/lamebus/ltimer.c
+OBJS+=ltimer.o
+
+rtclock_ltimer.o: ${S}/dev/lamebus/rtclock_ltimer.c
+	${COMPILE.c} ${S}/dev/lamebus/rtclock_ltimer.c
+SRCS+=${S}/dev/lamebus/rtclock_ltimer.c
+OBJS+=rtclock_ltimer.o
+
+emu_att.o: ${S}/dev/lamebus/emu_att.c
+	${COMPILE.c} ${S}/dev/lamebus/emu_att.c
+SRCS+=${S}/dev/lamebus/emu_att.c
+OBJS+=emu_att.o
+
+random_lrandom.o: ${S}/dev/lamebus/random_lrandom.c
+	${COMPILE.c} ${S}/dev/lamebus/random_lrandom.c
+SRCS+=${S}/dev/lamebus/random_lrandom.c
+OBJS+=random_lrandom.o
+
+beep_ltimer.o: ${S}/dev/lamebus/beep_ltimer.c
+	${COMPILE.c} ${S}/dev/lamebus/beep_ltimer.c
+SRCS+=${S}/dev/lamebus/beep_ltimer.c
+OBJS+=beep_ltimer.o
+
+ltrace_att.o: ${S}/dev/lamebus/ltrace_att.c
+	${COMPILE.c} ${S}/dev/lamebus/ltrace_att.c
+SRCS+=${S}/dev/lamebus/ltrace_att.c
+OBJS+=ltrace_att.o
+
+pseudorand_att.o: ${S}/dev/generic/pseudorand_att.c
+	${COMPILE.c} ${S}/dev/generic/pseudorand_att.c
+SRCS+=${S}/dev/generic/pseudorand_att.c
+OBJS+=pseudorand_att.o
+
+con_lser.o: ${S}/dev/lamebus/con_lser.c
+	${COMPILE.c} ${S}/dev/lamebus/con_lser.c
+SRCS+=${S}/dev/lamebus/con_lser.c
+OBJS+=con_lser.o
+
+lrandom_att.o: ${S}/dev/lamebus/lrandom_att.c
+	${COMPILE.c} ${S}/dev/lamebus/lrandom_att.c
+SRCS+=${S}/dev/lamebus/lrandom_att.c
+OBJS+=lrandom_att.o
+
+lser_att.o: ${S}/dev/lamebus/lser_att.c
+	${COMPILE.c} ${S}/dev/lamebus/lser_att.c
+SRCS+=${S}/dev/lamebus/lser_att.c
+OBJS+=lser_att.o
+
+lhd_att.o: ${S}/dev/lamebus/lhd_att.c
+	${COMPILE.c} ${S}/dev/lamebus/lhd_att.c
+SRCS+=${S}/dev/lamebus/lhd_att.c
+OBJS+=lhd_att.o
+
+ltimer_att.o: ${S}/dev/lamebus/ltimer_att.c
+	${COMPILE.c} ${S}/dev/lamebus/ltimer_att.c
+SRCS+=${S}/dev/lamebus/ltimer_att.c
+OBJS+=ltimer_att.o
+
+sfs_io.o: ${S}/fs/sfs/sfs_io.c
+	${COMPILE.c} ${S}/fs/sfs/sfs_io.c
+SRCS+=${S}/fs/sfs/sfs_io.c
+OBJS+=sfs_io.o
+
+sfs_fs.o: ${S}/fs/sfs/sfs_fs.c
+	${COMPILE.c} ${S}/fs/sfs/sfs_fs.c
+SRCS+=${S}/fs/sfs/sfs_fs.c
+OBJS+=sfs_fs.o
+
+sfs_vnode.o: ${S}/fs/sfs/sfs_vnode.c
+	${COMPILE.c} ${S}/fs/sfs/sfs_vnode.c
+SRCS+=${S}/fs/sfs/sfs_vnode.c
+OBJS+=sfs_vnode.o
+
+dumbvm.o: ${S}/arch/mips/mips/dumbvm.c
+	${COMPILE.c} ${S}/arch/mips/mips/dumbvm.c
+SRCS+=${S}/arch/mips/mips/dumbvm.c
+OBJS+=dumbvm.o
+
+cache_mips1.o: ${S}/arch/mips/mips/cache_mips1.S
+	${COMPILE.S} ${S}/arch/mips/mips/cache_mips1.S
+SRCS+=${S}/arch/mips/mips/cache_mips1.S
+OBJS+=cache_mips1.o
+
+exception.o: ${S}/arch/mips/mips/exception.S
+	${COMPILE.S} ${S}/arch/mips/mips/exception.S
+SRCS+=${S}/arch/mips/mips/exception.S
+OBJS+=exception.o
+
+lamebus_mips.o: ${S}/arch/mips/mips/lamebus_mips.c
+	${COMPILE.c} ${S}/arch/mips/mips/lamebus_mips.c
+SRCS+=${S}/arch/mips/mips/lamebus_mips.c
+OBJS+=lamebus_mips.o
+
+interrupt.o: ${S}/arch/mips/mips/interrupt.c
+	${COMPILE.c} ${S}/arch/mips/mips/interrupt.c
+SRCS+=${S}/arch/mips/mips/interrupt.c
+OBJS+=interrupt.o
+
+pcb.o: ${S}/arch/mips/mips/pcb.c
+	${COMPILE.c} ${S}/arch/mips/mips/pcb.c
+SRCS+=${S}/arch/mips/mips/pcb.c
+OBJS+=pcb.o
+
+ram.o: ${S}/arch/mips/mips/ram.c
+	${COMPILE.c} ${S}/arch/mips/mips/ram.c
+SRCS+=${S}/arch/mips/mips/ram.c
+OBJS+=ram.o
+
+spl.o: ${S}/arch/mips/mips/spl.c
+	${COMPILE.c} ${S}/arch/mips/mips/spl.c
+SRCS+=${S}/arch/mips/mips/spl.c
+OBJS+=spl.o
+
+start.o: ${S}/arch/mips/mips/start.S
+	${COMPILE.S} ${S}/arch/mips/mips/start.S
+SRCS+=${S}/arch/mips/mips/start.S
+OBJS+=start.o
+
+switch.o: ${S}/arch/mips/mips/switch.S
+	${COMPILE.S} ${S}/arch/mips/mips/switch.S
+SRCS+=${S}/arch/mips/mips/switch.S
+OBJS+=switch.o
+
+syscall.o: ${S}/arch/mips/mips/syscall.c
+	${COMPILE.c} ${S}/arch/mips/mips/syscall.c
+SRCS+=${S}/arch/mips/mips/syscall.c
+OBJS+=syscall.o
+
+threadstart.o: ${S}/arch/mips/mips/threadstart.S
+	${COMPILE.S} ${S}/arch/mips/mips/threadstart.S
+SRCS+=${S}/arch/mips/mips/threadstart.S
+OBJS+=threadstart.o
+
+trap.o: ${S}/arch/mips/mips/trap.c
+	${COMPILE.c} ${S}/arch/mips/mips/trap.c
+SRCS+=${S}/arch/mips/mips/trap.c
+OBJS+=trap.o
+
+tlb_mips1.o: ${S}/arch/mips/mips/tlb_mips1.S
+	${COMPILE.S} ${S}/arch/mips/mips/tlb_mips1.S
+SRCS+=${S}/arch/mips/mips/tlb_mips1.S
+OBJS+=tlb_mips1.o
+
+mips-setjmp.o: ${S}/../lib/libc/mips-setjmp.S
+	${COMPILE.S} ${S}/../lib/libc/mips-setjmp.S
+SRCS+=${S}/../lib/libc/mips-setjmp.S
+OBJS+=mips-setjmp.o
+
+copyinout.o: ${S}/lib/copyinout.c
+	${COMPILE.c} ${S}/lib/copyinout.c
+SRCS+=${S}/lib/copyinout.c
+OBJS+=copyinout.o
+
+array.o: ${S}/lib/array.c
+	${COMPILE.c} ${S}/lib/array.c
+SRCS+=${S}/lib/array.c
+OBJS+=array.o
+
+bitmap.o: ${S}/lib/bitmap.c
+	${COMPILE.c} ${S}/lib/bitmap.c
+SRCS+=${S}/lib/bitmap.c
+OBJS+=bitmap.o
+
+queue.o: ${S}/lib/queue.c
+	${COMPILE.c} ${S}/lib/queue.c
+SRCS+=${S}/lib/queue.c
+OBJS+=queue.o
+
+kheap.o: ${S}/lib/kheap.c
+	${COMPILE.c} ${S}/lib/kheap.c
+SRCS+=${S}/lib/kheap.c
+OBJS+=kheap.o
+
+kprintf.o: ${S}/lib/kprintf.c
+	${COMPILE.c} ${S}/lib/kprintf.c
+SRCS+=${S}/lib/kprintf.c
+OBJS+=kprintf.o
+
+kgets.o: ${S}/lib/kgets.c
+	${COMPILE.c} ${S}/lib/kgets.c
+SRCS+=${S}/lib/kgets.c
+OBJS+=kgets.o
+
+misc.o: ${S}/lib/misc.c
+	${COMPILE.c} ${S}/lib/misc.c
+SRCS+=${S}/lib/misc.c
+OBJS+=misc.o
+
+ntoh.o: ${S}/lib/ntoh.c
+	${COMPILE.c} ${S}/lib/ntoh.c
+SRCS+=${S}/lib/ntoh.c
+OBJS+=ntoh.o
+
+__printf.o: ${S}/../lib/libc/__printf.c
+	${COMPILE.c} ${S}/../lib/libc/__printf.c
+SRCS+=${S}/../lib/libc/__printf.c
+OBJS+=__printf.o
+
+snprintf.o: ${S}/../lib/libc/snprintf.c
+	${COMPILE.c} ${S}/../lib/libc/snprintf.c
+SRCS+=${S}/../lib/libc/snprintf.c
+OBJS+=snprintf.o
+
+atoi.o: ${S}/../lib/libc/atoi.c
+	${COMPILE.c} ${S}/../lib/libc/atoi.c
+SRCS+=${S}/../lib/libc/atoi.c
+OBJS+=atoi.o
+
+bzero.o: ${S}/../lib/libc/bzero.c
+	${COMPILE.c} ${S}/../lib/libc/bzero.c
+SRCS+=${S}/../lib/libc/bzero.c
+OBJS+=bzero.o
+
+memcpy.o: ${S}/../lib/libc/memcpy.c
+	${COMPILE.c} ${S}/../lib/libc/memcpy.c
+SRCS+=${S}/../lib/libc/memcpy.c
+OBJS+=memcpy.o
+
+memmove.o: ${S}/../lib/libc/memmove.c
+	${COMPILE.c} ${S}/../lib/libc/memmove.c
+SRCS+=${S}/../lib/libc/memmove.c
+OBJS+=memmove.o
+
+strcat.o: ${S}/../lib/libc/strcat.c
+	${COMPILE.c} ${S}/../lib/libc/strcat.c
+SRCS+=${S}/../lib/libc/strcat.c
+OBJS+=strcat.o
+
+strchr.o: ${S}/../lib/libc/strchr.c
+	${COMPILE.c} ${S}/../lib/libc/strchr.c
+SRCS+=${S}/../lib/libc/strchr.c
+OBJS+=strchr.o
+
+strcmp.o: ${S}/../lib/libc/strcmp.c
+	${COMPILE.c} ${S}/../lib/libc/strcmp.c
+SRCS+=${S}/../lib/libc/strcmp.c
+OBJS+=strcmp.o
+
+strcpy.o: ${S}/../lib/libc/strcpy.c
+	${COMPILE.c} ${S}/../lib/libc/strcpy.c
+SRCS+=${S}/../lib/libc/strcpy.c
+OBJS+=strcpy.o
+
+strlen.o: ${S}/../lib/libc/strlen.c
+	${COMPILE.c} ${S}/../lib/libc/strlen.c
+SRCS+=${S}/../lib/libc/strlen.c
+OBJS+=strlen.o
+
+strrchr.o: ${S}/../lib/libc/strrchr.c
+	${COMPILE.c} ${S}/../lib/libc/strrchr.c
+SRCS+=${S}/../lib/libc/strrchr.c
+OBJS+=strrchr.o
+
+strtok_r.o: ${S}/../lib/libc/strtok_r.c
+	${COMPILE.c} ${S}/../lib/libc/strtok_r.c
+SRCS+=${S}/../lib/libc/strtok_r.c
+OBJS+=strtok_r.o
+
+init.o: ${S}/dev/init.c
+	${COMPILE.c} ${S}/dev/init.c
+SRCS+=${S}/dev/init.c
+OBJS+=init.o
+
+device.o: ${S}/fs/vfs/device.c
+	${COMPILE.c} ${S}/fs/vfs/device.c
+SRCS+=${S}/fs/vfs/device.c
+OBJS+=device.o
+
+vfscwd.o: ${S}/fs/vfs/vfscwd.c
+	${COMPILE.c} ${S}/fs/vfs/vfscwd.c
+SRCS+=${S}/fs/vfs/vfscwd.c
+OBJS+=vfscwd.o
+
+vfslist.o: ${S}/fs/vfs/vfslist.c
+	${COMPILE.c} ${S}/fs/vfs/vfslist.c
+SRCS+=${S}/fs/vfs/vfslist.c
+OBJS+=vfslist.o
+
+vfslookup.o: ${S}/fs/vfs/vfslookup.c
+	${COMPILE.c} ${S}/fs/vfs/vfslookup.c
+SRCS+=${S}/fs/vfs/vfslookup.c
+OBJS+=vfslookup.o
+
+vfspath.o: ${S}/fs/vfs/vfspath.c
+	${COMPILE.c} ${S}/fs/vfs/vfspath.c
+SRCS+=${S}/fs/vfs/vfspath.c
+OBJS+=vfspath.o
+
+vnode.o: ${S}/fs/vfs/vnode.c
+	${COMPILE.c} ${S}/fs/vfs/vnode.c
+SRCS+=${S}/fs/vfs/vnode.c
+OBJS+=vnode.o
+
+devnull.o: ${S}/fs/vfs/devnull.c
+	${COMPILE.c} ${S}/fs/vfs/devnull.c
+SRCS+=${S}/fs/vfs/devnull.c
+OBJS+=devnull.o
+
+hardclock.o: ${S}/thread/hardclock.c
+	${COMPILE.c} ${S}/thread/hardclock.c
+SRCS+=${S}/thread/hardclock.c
+OBJS+=hardclock.o
+
+synch.o: ${S}/thread/synch.c
+	${COMPILE.c} ${S}/thread/synch.c
+SRCS+=${S}/thread/synch.c
+OBJS+=synch.o
+
+scheduler.o: ${S}/thread/scheduler.c
+	${COMPILE.c} ${S}/thread/scheduler.c
+SRCS+=${S}/thread/scheduler.c
+OBJS+=scheduler.o
+
+thread.o: ${S}/thread/thread.c
+	${COMPILE.c} ${S}/thread/thread.c
+SRCS+=${S}/thread/thread.c
+OBJS+=thread.o
+
+main.o: ${S}/main/main.c
+	${COMPILE.c} ${S}/main/main.c
+SRCS+=${S}/main/main.c
+OBJS+=main.o
+
+menu.o: ${S}/main/menu.c
+	${COMPILE.c} ${S}/main/menu.c
+SRCS+=${S}/main/menu.c
+OBJS+=menu.o
+
+hello.o: ${S}/main/hello.c
+	${COMPILE.c} ${S}/main/hello.c
+SRCS+=${S}/main/hello.c
+OBJS+=hello.o
+
+loadelf.o: ${S}/userprog/loadelf.c
+	${COMPILE.c} ${S}/userprog/loadelf.c
+SRCS+=${S}/userprog/loadelf.c
+OBJS+=loadelf.o
+
+runprogram.o: ${S}/userprog/runprogram.c
+	${COMPILE.c} ${S}/userprog/runprogram.c
+SRCS+=${S}/userprog/runprogram.c
+OBJS+=runprogram.o
+
+uio.o: ${S}/userprog/uio.c
+	${COMPILE.c} ${S}/userprog/uio.c
+SRCS+=${S}/userprog/uio.c
+OBJS+=uio.o
+
+arraytest.o: ${S}/test/arraytest.c
+	${COMPILE.c} ${S}/test/arraytest.c
+SRCS+=${S}/test/arraytest.c
+OBJS+=arraytest.o
+
+bitmaptest.o: ${S}/test/bitmaptest.c
+	${COMPILE.c} ${S}/test/bitmaptest.c
+SRCS+=${S}/test/bitmaptest.c
+OBJS+=bitmaptest.o
+
+queuetest.o: ${S}/test/queuetest.c
+	${COMPILE.c} ${S}/test/queuetest.c
+SRCS+=${S}/test/queuetest.c
+OBJS+=queuetest.o
+
+threadtest.o: ${S}/test/threadtest.c
+	${COMPILE.c} ${S}/test/threadtest.c
+SRCS+=${S}/test/threadtest.c
+OBJS+=threadtest.o
+
+tt3.o: ${S}/test/tt3.c
+	${COMPILE.c} ${S}/test/tt3.c
+SRCS+=${S}/test/tt3.c
+OBJS+=tt3.o
+
+synchtest.o: ${S}/test/synchtest.c
+	${COMPILE.c} ${S}/test/synchtest.c
+SRCS+=${S}/test/synchtest.c
+OBJS+=synchtest.o
+
+malloctest.o: ${S}/test/malloctest.c
+	${COMPILE.c} ${S}/test/malloctest.c
+SRCS+=${S}/test/malloctest.c
+OBJS+=malloctest.o
+
+fstest.o: ${S}/test/fstest.c
+	${COMPILE.c} ${S}/test/fstest.c
+SRCS+=${S}/test/fstest.c
+OBJS+=fstest.o
+
+autoconf.o: ${S}/compile/ASST2/autoconf.c
+	${COMPILE.c} ${S}/compile/ASST2/autoconf.c
+SRCS+=${S}/compile/ASST2/autoconf.c
+OBJS+=autoconf.o
+
diff --git a/src/kern/compile/ASST2/filetable.o b/src/kern/compile/ASST2/filetable.o
new file mode 100644
index 0000000..93ac7f6
Binary files /dev/null and b/src/kern/compile/ASST2/filetable.o differ
diff --git a/src/kern/compile/ASST2/fork.o b/src/kern/compile/ASST2/fork.o
new file mode 100644
index 0000000..05578c9
Binary files /dev/null and b/src/kern/compile/ASST2/fork.o differ
diff --git a/src/kern/compile/ASST2/fstest.o b/src/kern/compile/ASST2/fstest.o
new file mode 100644
index 0000000..41805c1
Binary files /dev/null and b/src/kern/compile/ASST2/fstest.o differ
diff --git a/src/kern/compile/ASST2/getpid.o b/src/kern/compile/ASST2/getpid.o
new file mode 100644
index 0000000..6b26f0c
Binary files /dev/null and b/src/kern/compile/ASST2/getpid.o differ
diff --git a/src/kern/compile/ASST2/hardclock.o b/src/kern/compile/ASST2/hardclock.o
new file mode 100644
index 0000000..08333dd
Binary files /dev/null and b/src/kern/compile/ASST2/hardclock.o differ
diff --git a/src/kern/compile/ASST2/hello.o b/src/kern/compile/ASST2/hello.o
new file mode 100644
index 0000000..d1d02e7
Binary files /dev/null and b/src/kern/compile/ASST2/hello.o differ
diff --git a/src/kern/compile/ASST2/init.o b/src/kern/compile/ASST2/init.o
new file mode 100644
index 0000000..2851ff9
Binary files /dev/null and b/src/kern/compile/ASST2/init.o differ
diff --git a/src/kern/compile/ASST2/interrupt.o b/src/kern/compile/ASST2/interrupt.o
new file mode 100644
index 0000000..1f28637
Binary files /dev/null and b/src/kern/compile/ASST2/interrupt.o differ
diff --git a/src/kern/compile/ASST2/kernel b/src/kern/compile/ASST2/kernel
new file mode 100755
index 0000000..3215d1f
Binary files /dev/null and b/src/kern/compile/ASST2/kernel differ
diff --git a/src/kern/compile/ASST2/kgets.o b/src/kern/compile/ASST2/kgets.o
new file mode 100644
index 0000000..dc18a0b
Binary files /dev/null and b/src/kern/compile/ASST2/kgets.o differ
diff --git a/src/kern/compile/ASST2/kheap.o b/src/kern/compile/ASST2/kheap.o
new file mode 100644
index 0000000..eb17520
Binary files /dev/null and b/src/kern/compile/ASST2/kheap.o differ
diff --git a/src/kern/compile/ASST2/kprintf.o b/src/kern/compile/ASST2/kprintf.o
new file mode 100644
index 0000000..c4c8677
Binary files /dev/null and b/src/kern/compile/ASST2/kprintf.o differ
diff --git a/src/kern/compile/ASST2/lamebus.o b/src/kern/compile/ASST2/lamebus.o
new file mode 100644
index 0000000..ea83e99
Binary files /dev/null and b/src/kern/compile/ASST2/lamebus.o differ
diff --git a/src/kern/compile/ASST2/lamebus_mips.o b/src/kern/compile/ASST2/lamebus_mips.o
new file mode 100644
index 0000000..0bfc324
Binary files /dev/null and b/src/kern/compile/ASST2/lamebus_mips.o differ
diff --git a/src/kern/compile/ASST2/lhd.o b/src/kern/compile/ASST2/lhd.o
new file mode 100644
index 0000000..5a37d8a
Binary files /dev/null and b/src/kern/compile/ASST2/lhd.o differ
diff --git a/src/kern/compile/ASST2/lhd_att.o b/src/kern/compile/ASST2/lhd_att.o
new file mode 100644
index 0000000..e19b5bd
Binary files /dev/null and b/src/kern/compile/ASST2/lhd_att.o differ
diff --git a/src/kern/compile/ASST2/loadelf.o b/src/kern/compile/ASST2/loadelf.o
new file mode 100644
index 0000000..89fca96
Binary files /dev/null and b/src/kern/compile/ASST2/loadelf.o differ
diff --git a/src/kern/compile/ASST2/lrandom.o b/src/kern/compile/ASST2/lrandom.o
new file mode 100644
index 0000000..9a56e5c
Binary files /dev/null and b/src/kern/compile/ASST2/lrandom.o differ
diff --git a/src/kern/compile/ASST2/lrandom_att.o b/src/kern/compile/ASST2/lrandom_att.o
new file mode 100644
index 0000000..0e01adc
Binary files /dev/null and b/src/kern/compile/ASST2/lrandom_att.o differ
diff --git a/src/kern/compile/ASST2/lser.o b/src/kern/compile/ASST2/lser.o
new file mode 100644
index 0000000..74c03c8
Binary files /dev/null and b/src/kern/compile/ASST2/lser.o differ
diff --git a/src/kern/compile/ASST2/lser_att.o b/src/kern/compile/ASST2/lser_att.o
new file mode 100644
index 0000000..5d33813
Binary files /dev/null and b/src/kern/compile/ASST2/lser_att.o differ
diff --git a/src/kern/compile/ASST2/ltimer.o b/src/kern/compile/ASST2/ltimer.o
new file mode 100644
index 0000000..28a96ed
Binary files /dev/null and b/src/kern/compile/ASST2/ltimer.o differ
diff --git a/src/kern/compile/ASST2/ltimer_att.o b/src/kern/compile/ASST2/ltimer_att.o
new file mode 100644
index 0000000..20882c7
Binary files /dev/null and b/src/kern/compile/ASST2/ltimer_att.o differ
diff --git a/src/kern/compile/ASST2/ltrace.o b/src/kern/compile/ASST2/ltrace.o
new file mode 100644
index 0000000..7fdfa9d
Binary files /dev/null and b/src/kern/compile/ASST2/ltrace.o differ
diff --git a/src/kern/compile/ASST2/ltrace_att.o b/src/kern/compile/ASST2/ltrace_att.o
new file mode 100644
index 0000000..284b32b
Binary files /dev/null and b/src/kern/compile/ASST2/ltrace_att.o differ
diff --git a/src/kern/compile/ASST2/machine b/src/kern/compile/ASST2/machine
new file mode 120000
index 0000000..c12f325
--- /dev/null
+++ b/src/kern/compile/ASST2/machine
@@ -0,0 +1 @@
+../../arch/mips/include
\ No newline at end of file
diff --git a/src/kern/compile/ASST2/main.o b/src/kern/compile/ASST2/main.o
new file mode 100644
index 0000000..706c231
Binary files /dev/null and b/src/kern/compile/ASST2/main.o differ
diff --git a/src/kern/compile/ASST2/malloctest.o b/src/kern/compile/ASST2/malloctest.o
new file mode 100644
index 0000000..627cba8
Binary files /dev/null and b/src/kern/compile/ASST2/malloctest.o differ
diff --git a/src/kern/compile/ASST2/memcpy.o b/src/kern/compile/ASST2/memcpy.o
new file mode 100644
index 0000000..809845b
Binary files /dev/null and b/src/kern/compile/ASST2/memcpy.o differ
diff --git a/src/kern/compile/ASST2/memmove.o b/src/kern/compile/ASST2/memmove.o
new file mode 100644
index 0000000..01c1ac1
Binary files /dev/null and b/src/kern/compile/ASST2/memmove.o differ
diff --git a/src/kern/compile/ASST2/menu.o b/src/kern/compile/ASST2/menu.o
new file mode 100644
index 0000000..4c57c78
Binary files /dev/null and b/src/kern/compile/ASST2/menu.o differ
diff --git a/src/kern/compile/ASST2/mips-setjmp.o b/src/kern/compile/ASST2/mips-setjmp.o
new file mode 100644
index 0000000..6c7d93e
Binary files /dev/null and b/src/kern/compile/ASST2/mips-setjmp.o differ
diff --git a/src/kern/compile/ASST2/misc.o b/src/kern/compile/ASST2/misc.o
new file mode 100644
index 0000000..6e706bd
Binary files /dev/null and b/src/kern/compile/ASST2/misc.o differ
diff --git a/src/kern/compile/ASST2/ntoh.o b/src/kern/compile/ASST2/ntoh.o
new file mode 100644
index 0000000..708629e
Binary files /dev/null and b/src/kern/compile/ASST2/ntoh.o differ
diff --git a/src/kern/compile/ASST2/open.o b/src/kern/compile/ASST2/open.o
new file mode 100644
index 0000000..2812abf
Binary files /dev/null and b/src/kern/compile/ASST2/open.o differ
diff --git a/src/kern/compile/ASST2/opt-dumbvm.h b/src/kern/compile/ASST2/opt-dumbvm.h
new file mode 100644
index 0000000..7db9b01
--- /dev/null
+++ b/src/kern/compile/ASST2/opt-dumbvm.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_DUMBVM_H_
+#define _OPT_DUMBVM_H_
+#define OPT_DUMBVM 1
+#endif /* _OPT_DUMBVM_H_ */
diff --git a/src/kern/compile/ASST2/opt-net.h b/src/kern/compile/ASST2/opt-net.h
new file mode 100644
index 0000000..0340a83
--- /dev/null
+++ b/src/kern/compile/ASST2/opt-net.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_NET_H_
+#define _OPT_NET_H_
+#define OPT_NET 0
+#endif /* _OPT_NET_H_ */
diff --git a/src/kern/compile/ASST2/opt-netfs.h b/src/kern/compile/ASST2/opt-netfs.h
new file mode 100644
index 0000000..cd21c56
--- /dev/null
+++ b/src/kern/compile/ASST2/opt-netfs.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_NETFS_H_
+#define _OPT_NETFS_H_
+#define OPT_NETFS 0
+#endif /* _OPT_NETFS_H_ */
diff --git a/src/kern/compile/ASST2/opt-sfs.h b/src/kern/compile/ASST2/opt-sfs.h
new file mode 100644
index 0000000..94095ad
--- /dev/null
+++ b/src/kern/compile/ASST2/opt-sfs.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_SFS_H_
+#define _OPT_SFS_H_
+#define OPT_SFS 1
+#endif /* _OPT_SFS_H_ */
diff --git a/src/kern/compile/ASST2/opt-synchprobs.h b/src/kern/compile/ASST2/opt-synchprobs.h
new file mode 100644
index 0000000..9114407
--- /dev/null
+++ b/src/kern/compile/ASST2/opt-synchprobs.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_SYNCHPROBS_H_
+#define _OPT_SYNCHPROBS_H_
+#define OPT_SYNCHPROBS 0
+#endif /* _OPT_SYNCHPROBS_H_ */
diff --git a/src/kern/compile/ASST2/pcb.o b/src/kern/compile/ASST2/pcb.o
new file mode 100644
index 0000000..a881730
Binary files /dev/null and b/src/kern/compile/ASST2/pcb.o differ
diff --git a/src/kern/compile/ASST2/pid.o b/src/kern/compile/ASST2/pid.o
new file mode 100644
index 0000000..273e18a
Binary files /dev/null and b/src/kern/compile/ASST2/pid.o differ
diff --git a/src/kern/compile/ASST2/process.o b/src/kern/compile/ASST2/process.o
new file mode 100644
index 0000000..52e087e
Binary files /dev/null and b/src/kern/compile/ASST2/process.o differ
diff --git a/src/kern/compile/ASST2/pseudorand.o b/src/kern/compile/ASST2/pseudorand.o
new file mode 100644
index 0000000..85d34ba
Binary files /dev/null and b/src/kern/compile/ASST2/pseudorand.o differ
diff --git a/src/kern/compile/ASST2/pseudorand_att.o b/src/kern/compile/ASST2/pseudorand_att.o
new file mode 100644
index 0000000..4c516aa
Binary files /dev/null and b/src/kern/compile/ASST2/pseudorand_att.o differ
diff --git a/src/kern/compile/ASST2/queue.o b/src/kern/compile/ASST2/queue.o
new file mode 100644
index 0000000..21ecee1
Binary files /dev/null and b/src/kern/compile/ASST2/queue.o differ
diff --git a/src/kern/compile/ASST2/queuetest.o b/src/kern/compile/ASST2/queuetest.o
new file mode 100644
index 0000000..f899e8f
Binary files /dev/null and b/src/kern/compile/ASST2/queuetest.o differ
diff --git a/src/kern/compile/ASST2/ram.o b/src/kern/compile/ASST2/ram.o
new file mode 100644
index 0000000..d0d75c7
Binary files /dev/null and b/src/kern/compile/ASST2/ram.o differ
diff --git a/src/kern/compile/ASST2/random.o b/src/kern/compile/ASST2/random.o
new file mode 100644
index 0000000..4061627
Binary files /dev/null and b/src/kern/compile/ASST2/random.o differ
diff --git a/src/kern/compile/ASST2/random_lrandom.o b/src/kern/compile/ASST2/random_lrandom.o
new file mode 100644
index 0000000..8773162
Binary files /dev/null and b/src/kern/compile/ASST2/random_lrandom.o differ
diff --git a/src/kern/compile/ASST2/read.o b/src/kern/compile/ASST2/read.o
new file mode 100644
index 0000000..cd384f6
Binary files /dev/null and b/src/kern/compile/ASST2/read.o differ
diff --git a/src/kern/compile/ASST2/rtclock.o b/src/kern/compile/ASST2/rtclock.o
new file mode 100644
index 0000000..ce504e3
Binary files /dev/null and b/src/kern/compile/ASST2/rtclock.o differ
diff --git a/src/kern/compile/ASST2/rtclock_ltimer.o b/src/kern/compile/ASST2/rtclock_ltimer.o
new file mode 100644
index 0000000..86ef6b6
Binary files /dev/null and b/src/kern/compile/ASST2/rtclock_ltimer.o differ
diff --git a/src/kern/compile/ASST2/runprogram.o b/src/kern/compile/ASST2/runprogram.o
new file mode 100644
index 0000000..65b61ba
Binary files /dev/null and b/src/kern/compile/ASST2/runprogram.o differ
diff --git a/src/kern/compile/ASST2/scheduler.o b/src/kern/compile/ASST2/scheduler.o
new file mode 100644
index 0000000..8c00101
Binary files /dev/null and b/src/kern/compile/ASST2/scheduler.o differ
diff --git a/src/kern/compile/ASST2/sfs_fs.o b/src/kern/compile/ASST2/sfs_fs.o
new file mode 100644
index 0000000..006e9ff
Binary files /dev/null and b/src/kern/compile/ASST2/sfs_fs.o differ
diff --git a/src/kern/compile/ASST2/sfs_io.o b/src/kern/compile/ASST2/sfs_io.o
new file mode 100644
index 0000000..0ff0396
Binary files /dev/null and b/src/kern/compile/ASST2/sfs_io.o differ
diff --git a/src/kern/compile/ASST2/sfs_vnode.o b/src/kern/compile/ASST2/sfs_vnode.o
new file mode 100644
index 0000000..3d3f7f9
Binary files /dev/null and b/src/kern/compile/ASST2/sfs_vnode.o differ
diff --git a/src/kern/compile/ASST2/snprintf.o b/src/kern/compile/ASST2/snprintf.o
new file mode 100644
index 0000000..e7e7db3
Binary files /dev/null and b/src/kern/compile/ASST2/snprintf.o differ
diff --git a/src/kern/compile/ASST2/spl.o b/src/kern/compile/ASST2/spl.o
new file mode 100644
index 0000000..0d081cd
Binary files /dev/null and b/src/kern/compile/ASST2/spl.o differ
diff --git a/src/kern/compile/ASST2/start.o b/src/kern/compile/ASST2/start.o
new file mode 100644
index 0000000..1ab15e3
Binary files /dev/null and b/src/kern/compile/ASST2/start.o differ
diff --git a/src/kern/compile/ASST2/strcat.o b/src/kern/compile/ASST2/strcat.o
new file mode 100644
index 0000000..1e47290
Binary files /dev/null and b/src/kern/compile/ASST2/strcat.o differ
diff --git a/src/kern/compile/ASST2/strchr.o b/src/kern/compile/ASST2/strchr.o
new file mode 100644
index 0000000..b9e3b9d
Binary files /dev/null and b/src/kern/compile/ASST2/strchr.o differ
diff --git a/src/kern/compile/ASST2/strcmp.o b/src/kern/compile/ASST2/strcmp.o
new file mode 100644
index 0000000..6e28811
Binary files /dev/null and b/src/kern/compile/ASST2/strcmp.o differ
diff --git a/src/kern/compile/ASST2/strcpy.o b/src/kern/compile/ASST2/strcpy.o
new file mode 100644
index 0000000..430335d
Binary files /dev/null and b/src/kern/compile/ASST2/strcpy.o differ
diff --git a/src/kern/compile/ASST2/strlen.o b/src/kern/compile/ASST2/strlen.o
new file mode 100644
index 0000000..4866061
Binary files /dev/null and b/src/kern/compile/ASST2/strlen.o differ
diff --git a/src/kern/compile/ASST2/strrchr.o b/src/kern/compile/ASST2/strrchr.o
new file mode 100644
index 0000000..41fc1d7
Binary files /dev/null and b/src/kern/compile/ASST2/strrchr.o differ
diff --git a/src/kern/compile/ASST2/strtok_r.o b/src/kern/compile/ASST2/strtok_r.o
new file mode 100644
index 0000000..9607d97
Binary files /dev/null and b/src/kern/compile/ASST2/strtok_r.o differ
diff --git a/src/kern/compile/ASST2/switch.o b/src/kern/compile/ASST2/switch.o
new file mode 100644
index 0000000..ca5271d
Binary files /dev/null and b/src/kern/compile/ASST2/switch.o differ
diff --git a/src/kern/compile/ASST2/synch.o b/src/kern/compile/ASST2/synch.o
new file mode 100644
index 0000000..3c403dc
Binary files /dev/null and b/src/kern/compile/ASST2/synch.o differ
diff --git a/src/kern/compile/ASST2/synchtest.o b/src/kern/compile/ASST2/synchtest.o
new file mode 100644
index 0000000..2a7ab38
Binary files /dev/null and b/src/kern/compile/ASST2/synchtest.o differ
diff --git a/src/kern/compile/ASST2/syscall.o b/src/kern/compile/ASST2/syscall.o
new file mode 100644
index 0000000..f2d7d7f
Binary files /dev/null and b/src/kern/compile/ASST2/syscall.o differ
diff --git a/src/kern/compile/ASST2/thread.o b/src/kern/compile/ASST2/thread.o
new file mode 100644
index 0000000..b5f4f8d
Binary files /dev/null and b/src/kern/compile/ASST2/thread.o differ
diff --git a/src/kern/compile/ASST2/threadstart.o b/src/kern/compile/ASST2/threadstart.o
new file mode 100644
index 0000000..8201fba
Binary files /dev/null and b/src/kern/compile/ASST2/threadstart.o differ
diff --git a/src/kern/compile/ASST2/threadtest.o b/src/kern/compile/ASST2/threadtest.o
new file mode 100644
index 0000000..9f61a66
Binary files /dev/null and b/src/kern/compile/ASST2/threadtest.o differ
diff --git a/src/kern/compile/ASST2/tlb_mips1.o b/src/kern/compile/ASST2/tlb_mips1.o
new file mode 100644
index 0000000..a3bd123
Binary files /dev/null and b/src/kern/compile/ASST2/tlb_mips1.o differ
diff --git a/src/kern/compile/ASST2/trap.o b/src/kern/compile/ASST2/trap.o
new file mode 100644
index 0000000..40d9fd9
Binary files /dev/null and b/src/kern/compile/ASST2/trap.o differ
diff --git a/src/kern/compile/ASST2/tt3.o b/src/kern/compile/ASST2/tt3.o
new file mode 100644
index 0000000..1c0aec9
Binary files /dev/null and b/src/kern/compile/ASST2/tt3.o differ
diff --git a/src/kern/compile/ASST2/uio.o b/src/kern/compile/ASST2/uio.o
new file mode 100644
index 0000000..13ab71f
Binary files /dev/null and b/src/kern/compile/ASST2/uio.o differ
diff --git a/src/kern/compile/ASST2/vers.c b/src/kern/compile/ASST2/vers.c
new file mode 100644
index 0000000..a14f3c6
--- /dev/null
+++ b/src/kern/compile/ASST2/vers.c
@@ -0,0 +1,3 @@
+/* This file is automatically generated. Edits will be lost.*/
+const int buildversion = 11;
+const char buildconfig[] = "ASST2";
diff --git a/src/kern/compile/ASST2/vers.o b/src/kern/compile/ASST2/vers.o
new file mode 100644
index 0000000..c55508f
Binary files /dev/null and b/src/kern/compile/ASST2/vers.o differ
diff --git a/src/kern/compile/ASST2/version b/src/kern/compile/ASST2/version
new file mode 100644
index 0000000..b4de394
--- /dev/null
+++ b/src/kern/compile/ASST2/version
@@ -0,0 +1 @@
+11
diff --git a/src/kern/compile/ASST2/vfscwd.o b/src/kern/compile/ASST2/vfscwd.o
new file mode 100644
index 0000000..e1de6d9
Binary files /dev/null and b/src/kern/compile/ASST2/vfscwd.o differ
diff --git a/src/kern/compile/ASST2/vfslist.o b/src/kern/compile/ASST2/vfslist.o
new file mode 100644
index 0000000..7743b2d
Binary files /dev/null and b/src/kern/compile/ASST2/vfslist.o differ
diff --git a/src/kern/compile/ASST2/vfslookup.o b/src/kern/compile/ASST2/vfslookup.o
new file mode 100644
index 0000000..bb92d9d
Binary files /dev/null and b/src/kern/compile/ASST2/vfslookup.o differ
diff --git a/src/kern/compile/ASST2/vfspath.o b/src/kern/compile/ASST2/vfspath.o
new file mode 100644
index 0000000..3db8f01
Binary files /dev/null and b/src/kern/compile/ASST2/vfspath.o differ
diff --git a/src/kern/compile/ASST2/vnode.o b/src/kern/compile/ASST2/vnode.o
new file mode 100644
index 0000000..bde3c89
Binary files /dev/null and b/src/kern/compile/ASST2/vnode.o differ
diff --git a/src/kern/compile/ASST2/waitpid.o b/src/kern/compile/ASST2/waitpid.o
new file mode 100644
index 0000000..1157c1b
Binary files /dev/null and b/src/kern/compile/ASST2/waitpid.o differ
diff --git a/src/kern/compile/ASST2/write.o b/src/kern/compile/ASST2/write.o
new file mode 100644
index 0000000..501e769
Binary files /dev/null and b/src/kern/compile/ASST2/write.o differ
diff --git a/src/kern/compile/ASST3/Makefile b/src/kern/compile/ASST3/Makefile
new file mode 100644
index 0000000..266ee72
--- /dev/null
+++ b/src/kern/compile/ASST3/Makefile
@@ -0,0 +1,197 @@
+# Automatically generated by config.
+# Edit arch/mips/conf/Makefile.mips instead, and rerun config.
+#
+
+#
+#
+# Makefile.mips
+#
+# OS/161 kernel makefile base for the MIPS r2000/r3000.
+#
+# The actual makefiles used are copies of this file - if you want to edit,
+# edit kern/arch/mips/conf/Makefile.mips and rerun config.
+#
+
+
+#
+# Filename for the kernel.
+#
+KERNEL=kernel
+
+#
+# Get the defs that were dumped out from the kernel config tool.
+# This defines:
+#	S		Path for top of kernel source tree
+#	ARCH		Architecture ("mips")
+#	DEBUGFLAGS	-O2 or -g
+#	CONFNAME	The name of the kernel config, e.g., ASST1
+#
+include defs.mk
+
+#
+# Get the tree-wide defs.
+# This defines (that we use):
+#	OSTREE		Path for top of installed system tree
+#	CC		C compiler
+#	KCFLAGS		C compiler flags for kernel
+#	LD		Linker
+#	KLDFLAGS	Linker flags for kernel
+#	SIZE		Object file size tool
+#
+include $S/../defs.mk
+
+#
+# Adjust defs for building the kernel.
+#
+# The LOAD_ADDRESS is the virtual address where the kernel will be loaded
+# into memory. This is in the direct-mapped cached segment of the MIPS
+# address space. -Ttext is the linker option for setting it.
+#
+# -T provides the linker with a "linker script". This is a piece of
+# obscure mumble that tells the linker how to put together the output
+# program. The only reason we need it is that the linker breaks if you
+# try to use -Ttext and its default built-in linker script at the same
+# time.
+#
+# -nostdinc prevents including header files other than our own, and 
+# -nostdlib prevents linking against any standard libraries. Because
+# the kernel has to be a completely standalone program, this is important.
+#
+# -ffreestanding tells gcc this is not an ordinary program, so it will
+# make fewer unwise assumptions about standard library functions.
+#
+# We define _KERNEL so certain source files that are shared between the
+# kernel and userland (like strcpy.c) can tell the difference so they know
+# which header files to use.
+#
+# -G 0 tells the assembler and linker not to reference global variables
+# via the "global pointer" (MIPS gp register) because we don't support 
+# handling the gp register.
+#
+LOAD_ADDRESS=0x80001000
+INCLUDES=-nostdinc -I$S/include -I$S/dev -I. 
+CFLAGS=$(KCFLAGS) $(DEBUGFLAGS) $(INCLUDES) -ffreestanding -D_KERNEL -G 0
+LDFLAGS=$(KLDFLAGS) -nostdlib \
+	-Ttext $(LOAD_ADDRESS) -T $S/arch/mips/conf/ldscript \
+	-G 0
+
+#
+# Rules for compiling various kinds of source files, by suffix.
+# (There's nothing magical about these names and make.)
+#
+# We don't actually use C++ in OS/161, although, with some fiddling,
+# you might be able to. But you must turn off exceptions and RTTI in
+# order to do so (the implementations of these in gcc are completely 
+# unsuitable for kernels.)
+#
+COMPILE.cc=$(CC) $(CFLAGS) -fno-rtti -fno-exceptions -c
+COMPILE.c=$(CC) $(CFLAGS) -c
+COMPILE.l=false   # redefine when needed 
+COMPILE.y=false   # redefine when needed 
+COMPILE.S=$(CC) $(CFLAGS) -c
+
+#
+# This should expand to all the header files in the kernel so they can
+# be fed to tags.
+#
+TAGS_HEADERS=$S/include/*.h $S/include/kern/*.h $S/arch/$(ARCH)/include/*.h
+
+#
+# Default make rule: build the kernel.
+#
+all: $(KERNEL)
+
+#
+# Here's how we link the kernel. 
+#
+# vers.c/.o is generated on every build. It contains a numeric serial
+# number incremented every time newvers.sh is run.  These values are
+# printed out by newvers.sh and are also displayed at boot time. This
+# makes it possible to tell at a glance whether you're actually
+# running the same kernel you just compiled.
+#
+# The version number is kept in the file called "version" in the build
+# directory.
+#
+# By immemorial tradition, "size" is run on the kernel after it's linked.
+#
+$(KERNEL):
+	$S/conf/newvers.sh $(CONFNAME)
+	$(COMPILE.c) vers.c
+	$(LD) $(LDFLAGS) $(OBJS) vers.o -o $(KERNEL)
+	$(SIZE) $(KERNEL)
+
+#
+# Use the -M argument to gcc to get it to output dependency information.
+# Note that we use -M, which includes deps for #include <...> files,
+# rather than -MM, which doesn't. This is because we are the operating
+# system: the #include <...> files are part of our project - in fact, in
+# the kernel they're the kernel's own include files - and they will be
+# changing!
+#
+depend:
+	$(CC) $(CFLAGS) -M $(SRCS) > depend.mk
+
+#
+# Remove everything generated during the compile.
+# (To remove absolutely everything automatically generated, you can just
+# blow away the whole compile directory.)
+#
+clean:
+	rm -f *.o *.a tags $(KERNEL)
+
+#
+# Rerun config for this configuration.
+#
+reconfig:
+	(cd ../../conf && ./config $(CONFNAME))
+
+#
+# [ -d $(OSTREE) ] succeeds if $(OSTREE) is a directory.
+# (See test(1).) Thus, if $(OSTREE) doesn't exist, it will be created.
+#
+
+# The kernel gets installed at the top of the installed system tree.
+# Since with OS/161 it's relatively likely that you'll be working with
+# several configurations at once, it gets installed under the name of
+# this config, and a symbolic link with the "real" name is set up to
+# point to the last kernel installed.
+#
+install:
+	[ -d $(OSTREE) ] || mkdir $(OSTREE)
+	cp $(KERNEL) $(OSTREE)/$(KERNEL)-$(CONFNAME)
+	-rm -f $(OSTREE)/$(KERNEL)
+	ln -s $(KERNEL)-$(CONFNAME) $(OSTREE)/$(KERNEL)
+
+#
+# Run tags on all the sources and header files. This is probably not
+# the most useful way to do this and needs attention. (XXX)
+#
+tags:
+	ctags -wtd $(SRCS) $(TAGS_HEADERS)
+
+#
+# This tells make that these rules are not files so it (hopefully)
+# won't become confused if files by those names appear.
+#
+.PHONY: all depend clean install tags reconfig
+
+#
+# Get the list of source files from where it was generated by the 
+# kernel config tool.
+#
+# This sets SRCS and OBJS, and also defines a rule for compiling each
+# source file.
+#
+include files.mk
+
+# Get dependency information.
+include depend.mk
+
+#
+# Tell make that the kernel depends on the object files listed in $(OBJS).
+# This (unlike the link commands that also use $(OBJS) above) must come
+# after the include of files.mk, because of the way make reads its input
+# and evaluates variables.
+#
+$(KERNEL): $(OBJS)
diff --git a/src/kern/compile/ASST3/__printf.o b/src/kern/compile/ASST3/__printf.o
new file mode 100644
index 0000000..7006092
Binary files /dev/null and b/src/kern/compile/ASST3/__printf.o differ
diff --git a/src/kern/compile/ASST3/addrspace.o b/src/kern/compile/ASST3/addrspace.o
new file mode 100644
index 0000000..a36828d
Binary files /dev/null and b/src/kern/compile/ASST3/addrspace.o differ
diff --git a/src/kern/compile/ASST3/array.o b/src/kern/compile/ASST3/array.o
new file mode 100644
index 0000000..2ee94a8
Binary files /dev/null and b/src/kern/compile/ASST3/array.o differ
diff --git a/src/kern/compile/ASST3/arraytest.o b/src/kern/compile/ASST3/arraytest.o
new file mode 100644
index 0000000..40ff436
Binary files /dev/null and b/src/kern/compile/ASST3/arraytest.o differ
diff --git a/src/kern/compile/ASST3/atoi.o b/src/kern/compile/ASST3/atoi.o
new file mode 100644
index 0000000..790b7a5
Binary files /dev/null and b/src/kern/compile/ASST3/atoi.o differ
diff --git a/src/kern/compile/ASST3/autoconf.c b/src/kern/compile/ASST3/autoconf.c
new file mode 100644
index 0000000..59a323e
--- /dev/null
+++ b/src/kern/compile/ASST3/autoconf.c
@@ -0,0 +1,455 @@
+/* Automatically generated; do not edit */
+#include <types.h>
+#include <lib.h>
+#include "autoconf.h"
+
+static void autoconf_beep(struct beep_softc *, int);
+static void autoconf_con(struct con_softc *, int);
+static void autoconf_emu(struct emu_softc *, int);
+static void autoconf_lhd(struct lhd_softc *, int);
+static void autoconf_lrandom(struct lrandom_softc *, int);
+static void autoconf_lser(struct lser_softc *, int);
+static void autoconf_ltimer(struct ltimer_softc *, int);
+static void autoconf_ltrace(struct ltrace_softc *, int);
+static void autoconf_pseudorand(struct pseudorand_softc *, int);
+static void autoconf_random(struct random_softc *, int);
+static void autoconf_rtclock(struct rtclock_softc *, int);
+static int nextunit_beep;
+static int nextunit_con;
+static int nextunit_emu;
+static int nextunit_lhd;
+static int nextunit_lrandom;
+static int nextunit_lser;
+static int nextunit_ltimer;
+static int nextunit_ltrace;
+static int nextunit_random;
+static int nextunit_rtclock;
+
+static
+int
+tryattach_emu_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct emu_softc *dev;
+	int result;
+
+	dev = attach_emu_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("emu%d at lamebus%d", devunit, busunit);
+	result = config_emu(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_emu = devunit+1;
+	autoconf_emu(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_ltrace_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct ltrace_softc *dev;
+	int result;
+
+	dev = attach_ltrace_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("ltrace%d at lamebus%d", devunit, busunit);
+	result = config_ltrace(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_ltrace = devunit+1;
+	autoconf_ltrace(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_ltimer_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct ltimer_softc *dev;
+	int result;
+
+	dev = attach_ltimer_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("ltimer%d at lamebus%d", devunit, busunit);
+	result = config_ltimer(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_ltimer = devunit+1;
+	autoconf_ltimer(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_lrandom_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct lrandom_softc *dev;
+	int result;
+
+	dev = attach_lrandom_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("lrandom%d at lamebus%d", devunit, busunit);
+	result = config_lrandom(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_lrandom = devunit+1;
+	autoconf_lrandom(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_lhd_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct lhd_softc *dev;
+	int result;
+
+	dev = attach_lhd_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("lhd%d at lamebus%d", devunit, busunit);
+	result = config_lhd(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_lhd = devunit+1;
+	autoconf_lhd(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_lser_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct lser_softc *dev;
+	int result;
+
+	dev = attach_lser_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("lser%d at lamebus%d", devunit, busunit);
+	result = config_lser(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_lser = devunit+1;
+	autoconf_lser(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_beep_to_ltimer(int devunit, struct ltimer_softc *bus, int busunit)
+{
+	struct beep_softc *dev;
+	int result;
+
+	dev = attach_beep_to_ltimer(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("beep%d at ltimer%d", devunit, busunit);
+	result = config_beep(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_beep = devunit+1;
+	autoconf_beep(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_con_to_lser(int devunit, struct lser_softc *bus, int busunit)
+{
+	struct con_softc *dev;
+	int result;
+
+	dev = attach_con_to_lser(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("con%d at lser%d", devunit, busunit);
+	result = config_con(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_con = devunit+1;
+	autoconf_con(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_rtclock_to_ltimer(int devunit, struct ltimer_softc *bus, int busunit)
+{
+	struct rtclock_softc *dev;
+	int result;
+
+	dev = attach_rtclock_to_ltimer(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("rtclock%d at ltimer%d", devunit, busunit);
+	result = config_rtclock(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_rtclock = devunit+1;
+	autoconf_rtclock(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_random_to_lrandom(int devunit, struct lrandom_softc *bus, int busunit)
+{
+	struct random_softc *dev;
+	int result;
+
+	dev = attach_random_to_lrandom(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("random%d at lrandom%d", devunit, busunit);
+	result = config_random(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_random = devunit+1;
+	autoconf_random(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_random_to_pseudorand(int devunit, struct pseudorand_softc *bus, int busunit)
+{
+	struct random_softc *dev;
+	int result;
+
+	dev = attach_random_to_pseudorand(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("random%d at pseudorand%d", devunit, busunit);
+	result = config_random(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_random = devunit+1;
+	autoconf_random(dev, devunit);
+	return 0;
+}
+
+
+static
+void
+autoconf_lhd(struct lhd_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_random(struct random_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_rtclock(struct rtclock_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_emu(struct emu_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+void
+autoconf_pseudorand(struct pseudorand_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+	if (busunit==0) {
+		if (nextunit_random <= 0) {
+			tryattach_random_to_pseudorand(0, bus, busunit);
+		}
+	}
+}
+
+static
+void
+autoconf_ltrace(struct ltrace_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_con(struct con_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+void
+autoconf_lamebus(struct lamebus_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+	{
+		int result, devunit=nextunit_emu;
+		do {
+			result = tryattach_emu_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+	{
+		int result, devunit=nextunit_ltrace;
+		do {
+			result = tryattach_ltrace_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+	{
+		int result, devunit=nextunit_ltimer;
+		do {
+			result = tryattach_ltimer_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+	{
+		int result, devunit=nextunit_lrandom;
+		do {
+			result = tryattach_lrandom_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+	{
+		int result, devunit=nextunit_lhd;
+		do {
+			result = tryattach_lhd_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+	{
+		int result, devunit=nextunit_lser;
+		do {
+			result = tryattach_lser_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+}
+
+static
+void
+autoconf_beep(struct beep_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_lser(struct lser_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+	{
+		if (nextunit_con <= 0) {
+			tryattach_con_to_lser(0, bus, busunit);
+		}
+	}
+}
+
+static
+void
+autoconf_lrandom(struct lrandom_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+	{
+		if (nextunit_random <= 0) {
+			tryattach_random_to_lrandom(0, bus, busunit);
+		}
+	}
+}
+
+static
+void
+autoconf_ltimer(struct ltimer_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+	{
+		if (nextunit_beep <= 0) {
+			tryattach_beep_to_ltimer(0, bus, busunit);
+		}
+	}
+	{
+		if (nextunit_rtclock <= 0) {
+			tryattach_rtclock_to_ltimer(0, bus, busunit);
+		}
+	}
+}
+
+void
+pseudoconfig(void)
+{
+	{
+		struct pseudorand_softc *s;
+		
+		s = pseudoattach_pseudorand(0);
+		if (s!=NULL) {
+			kprintf("pseudorand0 (virtual)\n");
+			autoconf_pseudorand(s, 0);
+		}
+	}
+}
+
diff --git a/src/kern/compile/ASST3/autoconf.h b/src/kern/compile/ASST3/autoconf.h
new file mode 100644
index 0000000..13ab76c
--- /dev/null
+++ b/src/kern/compile/ASST3/autoconf.h
@@ -0,0 +1,48 @@
+/* Automatically generated; do not edit */
+#ifndef _AUTOCONF_H_
+#define _AUTOCONF_H_
+
+struct lamebus_softc;
+struct emu_softc;
+struct ltrace_softc;
+struct ltimer_softc;
+struct lrandom_softc;
+struct lhd_softc;
+struct lser_softc;
+struct beep_softc;
+struct con_softc;
+struct rtclock_softc;
+struct random_softc;
+struct pseudorand_softc;
+struct random_softc;
+
+void autoconf_lamebus(struct lamebus_softc *dev, int unit);
+
+struct emu_softc *attach_emu_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct ltrace_softc *attach_ltrace_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct ltimer_softc *attach_ltimer_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct lrandom_softc *attach_lrandom_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct lhd_softc *attach_lhd_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct lser_softc *attach_lser_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct beep_softc *attach_beep_to_ltimer(int devunit, struct ltimer_softc *bus);
+struct con_softc *attach_con_to_lser(int devunit, struct lser_softc *bus);
+struct rtclock_softc *attach_rtclock_to_ltimer(int devunit, struct ltimer_softc *bus);
+struct random_softc *attach_random_to_lrandom(int devunit, struct lrandom_softc *bus);
+struct pseudorand_softc *pseudoattach_pseudorand(int devunit);
+struct random_softc *attach_random_to_pseudorand(int devunit, struct pseudorand_softc *bus);
+
+int config_emu(struct emu_softc *dev, int unit);
+int config_ltrace(struct ltrace_softc *dev, int unit);
+int config_ltimer(struct ltimer_softc *dev, int unit);
+int config_lrandom(struct lrandom_softc *dev, int unit);
+int config_lhd(struct lhd_softc *dev, int unit);
+int config_lser(struct lser_softc *dev, int unit);
+int config_beep(struct beep_softc *dev, int unit);
+int config_con(struct con_softc *dev, int unit);
+int config_rtclock(struct rtclock_softc *dev, int unit);
+int config_random(struct random_softc *dev, int unit);
+int config_random(struct random_softc *dev, int unit);
+
+void pseudoconfig(void);
+
+#endif /* _AUTOCONF_H_ */
diff --git a/src/kern/compile/ASST3/autoconf.o b/src/kern/compile/ASST3/autoconf.o
new file mode 100644
index 0000000..c814778
Binary files /dev/null and b/src/kern/compile/ASST3/autoconf.o differ
diff --git a/src/kern/compile/ASST3/beep.o b/src/kern/compile/ASST3/beep.o
new file mode 100644
index 0000000..5557153
Binary files /dev/null and b/src/kern/compile/ASST3/beep.o differ
diff --git a/src/kern/compile/ASST3/beep_ltimer.o b/src/kern/compile/ASST3/beep_ltimer.o
new file mode 100644
index 0000000..7d07561
Binary files /dev/null and b/src/kern/compile/ASST3/beep_ltimer.o differ
diff --git a/src/kern/compile/ASST3/bitmap.o b/src/kern/compile/ASST3/bitmap.o
new file mode 100644
index 0000000..d32db1c
Binary files /dev/null and b/src/kern/compile/ASST3/bitmap.o differ
diff --git a/src/kern/compile/ASST3/bitmaptest.o b/src/kern/compile/ASST3/bitmaptest.o
new file mode 100644
index 0000000..e2d5708
Binary files /dev/null and b/src/kern/compile/ASST3/bitmaptest.o differ
diff --git a/src/kern/compile/ASST3/bzero.o b/src/kern/compile/ASST3/bzero.o
new file mode 100644
index 0000000..2703156
Binary files /dev/null and b/src/kern/compile/ASST3/bzero.o differ
diff --git a/src/kern/compile/ASST3/cache_mips1.o b/src/kern/compile/ASST3/cache_mips1.o
new file mode 100644
index 0000000..138d1fe
Binary files /dev/null and b/src/kern/compile/ASST3/cache_mips1.o differ
diff --git a/src/kern/compile/ASST3/con_lser.o b/src/kern/compile/ASST3/con_lser.o
new file mode 100644
index 0000000..b359253
Binary files /dev/null and b/src/kern/compile/ASST3/con_lser.o differ
diff --git a/src/kern/compile/ASST3/console.o b/src/kern/compile/ASST3/console.o
new file mode 100644
index 0000000..a551337
Binary files /dev/null and b/src/kern/compile/ASST3/console.o differ
diff --git a/src/kern/compile/ASST3/copyinout.o b/src/kern/compile/ASST3/copyinout.o
new file mode 100644
index 0000000..39d308c
Binary files /dev/null and b/src/kern/compile/ASST3/copyinout.o differ
diff --git a/src/kern/compile/ASST3/coremap.o b/src/kern/compile/ASST3/coremap.o
new file mode 100644
index 0000000..612c7cb
Binary files /dev/null and b/src/kern/compile/ASST3/coremap.o differ
diff --git a/src/kern/compile/ASST3/defs.mk b/src/kern/compile/ASST3/defs.mk
new file mode 100644
index 0000000..cd23fb6
--- /dev/null
+++ b/src/kern/compile/ASST3/defs.mk
@@ -0,0 +1,5 @@
+# Automatically generated by config; do not edit
+S=../..
+ARCH=mips
+DEBUGFLAGS=-g
+CONFNAME=ASST3
diff --git a/src/kern/compile/ASST3/depend.mk b/src/kern/compile/ASST3/depend.mk
new file mode 100644
index 0000000..eb73103
--- /dev/null
+++ b/src/kern/compile/ASST3/depend.mk
@@ -0,0 +1,394 @@
+lhd.o: ../../dev/lamebus/lhd.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/synch.h ../../include/kern/errno.h machine/bus.h \
+  machine/vm.h ../../dev/lamebus/lamebus.h ../../include/uio.h \
+  ../../include/vfs.h ../../dev/lamebus/lhd.h ../../include/dev.h \
+  autoconf.h
+emu.o: ../../dev/lamebus/emu.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/kern/unistd.h ../../include/kern/stat.h \
+  ../../include/lib.h machine/setjmp.h ../../include/synch.h \
+  ../../include/array.h ../../include/uio.h ../../include/vfs.h \
+  ../../include/emufs.h ../../include/vnode.h ../../include/fs.h \
+  ../../dev/lamebus/emu.h machine/bus.h machine/vm.h \
+  ../../dev/lamebus/lamebus.h autoconf.h
+random.o: ../../dev/generic/random.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/kern/unistd.h ../../include/lib.h machine/setjmp.h \
+  ../../include/uio.h ../../include/vfs.h ../../dev/generic/random.h \
+  ../../include/dev.h autoconf.h
+rtclock.o: ../../dev/generic/rtclock.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../include/clock.h \
+  opt-synchprobs.h ../../dev/generic/rtclock.h autoconf.h
+pseudorand.o: ../../dev/generic/pseudorand.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/uio.h ../../dev/generic/pseudorand.h \
+  autoconf.h
+ltrace.o: ../../dev/lamebus/ltrace.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h machine/bus.h machine/vm.h ../../dev/lamebus/lamebus.h \
+  ../../dev/lamebus/ltrace.h autoconf.h
+lamebus.o: ../../dev/lamebus/lamebus.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h machine/spl.h ../../dev/lamebus/lamebus.h
+console.o: ../../dev/generic/console.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h machine/spl.h \
+  ../../include/synch.h ../../dev/generic/console.h ../../include/dev.h \
+  ../../include/vfs.h ../../include/uio.h autoconf.h
+lser.o: ../../dev/lamebus/lser.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  machine/spl.h machine/bus.h machine/vm.h ../../dev/lamebus/lamebus.h \
+  ../../dev/lamebus/lser.h autoconf.h
+beep.o: ../../dev/generic/beep.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../dev/generic/beep.h \
+  autoconf.h
+lrandom.o: ../../dev/lamebus/lrandom.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/uio.h machine/bus.h machine/vm.h \
+  ../../dev/lamebus/lamebus.h ../../dev/lamebus/lrandom.h autoconf.h
+ltimer.o: ../../dev/lamebus/ltimer.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/clock.h opt-synchprobs.h machine/bus.h \
+  machine/vm.h ../../dev/lamebus/lamebus.h ../../dev/lamebus/ltimer.h \
+  autoconf.h
+rtclock_ltimer.o: ../../dev/lamebus/rtclock_ltimer.c \
+  ../../include/types.h machine/types.h ../../include/kern/types.h \
+  ../../include/lib.h machine/setjmp.h ../../dev/generic/rtclock.h \
+  ../../dev/lamebus/ltimer.h autoconf.h
+emu_att.o: ../../dev/lamebus/emu_att.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../dev/lamebus/lamebus.h ../../dev/lamebus/emu.h \
+  autoconf.h
+random_lrandom.o: ../../dev/lamebus/random_lrandom.c \
+  ../../include/types.h machine/types.h ../../include/kern/types.h \
+  ../../include/lib.h machine/setjmp.h ../../dev/generic/random.h \
+  ../../include/dev.h ../../dev/lamebus/lrandom.h autoconf.h
+beep_ltimer.o: ../../dev/lamebus/beep_ltimer.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../dev/generic/beep.h ../../dev/lamebus/ltimer.h \
+  autoconf.h
+ltrace_att.o: ../../dev/lamebus/ltrace_att.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../dev/lamebus/lamebus.h ../../dev/lamebus/ltrace.h \
+  autoconf.h
+pseudorand_att.o: ../../dev/generic/pseudorand_att.c \
+  ../../include/types.h machine/types.h ../../include/kern/types.h \
+  ../../include/lib.h machine/setjmp.h ../../dev/generic/random.h \
+  ../../include/dev.h ../../dev/generic/pseudorand.h autoconf.h
+con_lser.o: ../../dev/lamebus/con_lser.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../dev/generic/console.h ../../dev/lamebus/lser.h \
+  autoconf.h
+lrandom_att.o: ../../dev/lamebus/lrandom_att.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../dev/lamebus/lamebus.h \
+  ../../dev/lamebus/lrandom.h autoconf.h
+lser_att.o: ../../dev/lamebus/lser_att.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../dev/lamebus/lamebus.h ../../dev/lamebus/lser.h \
+  autoconf.h
+lhd_att.o: ../../dev/lamebus/lhd_att.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../dev/lamebus/lamebus.h ../../dev/lamebus/lhd.h \
+  ../../include/dev.h autoconf.h
+ltimer_att.o: ../../dev/lamebus/ltimer_att.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../dev/lamebus/lamebus.h ../../dev/lamebus/ltimer.h \
+  autoconf.h
+sfs_io.o: ../../fs/sfs/sfs_io.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../include/uio.h \
+  ../../include/sfs.h ../../include/vnode.h ../../include/fs.h \
+  ../../include/kern/sfs.h ../../include/dev.h
+sfs_fs.o: ../../fs/sfs/sfs_fs.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/kern/errno.h ../../include/array.h ../../include/bitmap.h \
+  ../../include/uio.h ../../include/dev.h ../../include/sfs.h \
+  ../../include/vnode.h ../../include/fs.h ../../include/kern/sfs.h \
+  ../../include/vfs.h
+sfs_vnode.o: ../../fs/sfs/sfs_vnode.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/synch.h ../../include/array.h \
+  ../../include/bitmap.h ../../include/kern/stat.h \
+  ../../include/kern/errno.h ../../include/kern/unistd.h \
+  ../../include/uio.h ../../include/dev.h ../../include/sfs.h \
+  ../../include/vnode.h ../../include/fs.h ../../include/kern/sfs.h
+addrspace.o: ../../vm/addrspace.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../include/addrspace.h \
+  ../../include/vm.h machine/vm.h opt-dumbvm.h ../../include/array.h \
+  machine/spl.h machine/tlb.h ../../include/lpage.h \
+  ../../include/thread.h machine/pcb.h ../../include/synch.h \
+  ../../include/swap.h ../../include/vnode.h ../../include/uio.h \
+  ../../include/bitmap.h machine/coremap.h ../../include/curthread.h
+cache_mips1.o: ../../arch/mips/mips/cache_mips1.S machine/asmdefs.h
+exception.o: ../../arch/mips/mips/exception.S machine/asmdefs.h \
+  machine/specialreg.h
+lamebus_mips.o: ../../arch/mips/mips/lamebus_mips.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/kern/unistd.h \
+  ../../include/lib.h machine/setjmp.h ../../include/synch.h \
+  machine/spl.h machine/pcb.h ../../include/dev.h machine/bus.h \
+  machine/vm.h ../../dev/lamebus/lamebus.h autoconf.h
+interrupt.o: ../../arch/mips/mips/interrupt.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h machine/bus.h machine/vm.h ../../dev/lamebus/lamebus.h \
+  machine/spl.h machine/pcb.h
+pcb.o: ../../arch/mips/mips/pcb.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  machine/pcb.h machine/spl.h machine/switchframe.h \
+  ../../include/thread.h
+ram.o: ../../arch/mips/mips/ram.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/vm.h machine/vm.h machine/pcb.h
+spl.o: ../../arch/mips/mips/spl.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  machine/spl.h machine/specialreg.h
+start.o: ../../arch/mips/mips/start.S machine/asmdefs.h \
+  machine/specialreg.h
+switch.o: ../../arch/mips/mips/switch.S machine/asmdefs.h
+syscall.o: ../../arch/mips/mips/syscall.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h machine/pcb.h machine/spl.h \
+  machine/trapframe.h ../../include/kern/callno.h ../../include/syscall.h
+threadstart.o: ../../arch/mips/mips/threadstart.S machine/asmdefs.h
+trap.o: ../../arch/mips/mips/trap.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  machine/trapframe.h machine/specialreg.h machine/pcb.h machine/spl.h \
+  ../../include/vm.h machine/vm.h ../../include/thread.h \
+  ../../include/curthread.h
+tlb_mips1.o: ../../arch/mips/mips/tlb_mips1.S machine/asmdefs.h \
+  machine/specialreg.h
+mips-setjmp.o: ../../../lib/libc/mips-setjmp.S machine/asmdefs.h
+copyinout.o: ../../lib/copyinout.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h machine/pcb.h ../../include/vm.h \
+  machine/vm.h ../../include/thread.h ../../include/curthread.h
+coremap.o: ../../arch/mips/mips/coremap.c machine/coremap.h \
+  ../../include/types.h machine/types.h ../../include/kern/types.h \
+  ../../include/kern/errno.h ../../include/lib.h machine/setjmp.h \
+  ../../include/thread.h machine/pcb.h ../../include/curthread.h \
+  ../../include/addrspace.h ../../include/vm.h machine/vm.h opt-dumbvm.h \
+  ../../include/array.h machine/spl.h machine/tlb.h ../../include/lpage.h \
+  ../../include/synch.h ../../include/swap.h ../../include/vnode.h \
+  ../../include/uio.h ../../include/bitmap.h
+array.o: ../../lib/array.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../include/array.h
+bitmap.o: ../../lib/bitmap.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/kern/errno.h ../../include/bitmap.h
+queue.o: ../../lib/queue.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../include/queue.h
+kheap.o: ../../lib/kheap.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/vm.h machine/vm.h machine/spl.h machine/coremap.h \
+  ../../include/kern/errno.h ../../include/thread.h machine/pcb.h \
+  ../../include/curthread.h ../../include/addrspace.h opt-dumbvm.h \
+  ../../include/array.h machine/tlb.h ../../include/lpage.h \
+  ../../include/synch.h ../../include/swap.h ../../include/vnode.h \
+  ../../include/uio.h ../../include/bitmap.h
+kprintf.o: ../../lib/kprintf.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/stdarg.h ../../include/lib.h \
+  machine/setjmp.h ../../include/kern/unistd.h ../../include/synch.h \
+  ../../include/vfs.h ../../include/thread.h machine/pcb.h machine/spl.h
+kgets.o: ../../lib/kgets.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h
+misc.o: ../../lib/misc.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errmsg.h \
+  ../../include/lib.h machine/setjmp.h
+ntoh.o: ../../lib/ntoh.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h
+__printf.o: ../../../lib/libc/__printf.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/stdarg.h
+snprintf.o: ../../../lib/libc/snprintf.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/stdarg.h
+atoi.o: ../../../lib/libc/atoi.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h
+bzero.o: ../../../lib/libc/bzero.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h
+memcpy.o: ../../../lib/libc/memcpy.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h
+memmove.o: ../../../lib/libc/memmove.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h
+strcat.o: ../../../lib/libc/strcat.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h
+strchr.o: ../../../lib/libc/strchr.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h
+strcmp.o: ../../../lib/libc/strcmp.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h
+strcpy.o: ../../../lib/libc/strcpy.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h
+strlen.o: ../../../lib/libc/strlen.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h
+strrchr.o: ../../../lib/libc/strrchr.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h
+strtok_r.o: ../../../lib/libc/strtok_r.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h
+init.o: ../../dev/init.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  machine/spl.h ../../include/dev.h autoconf.h
+device.o: ../../fs/vfs/device.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/synch.h ../../include/kern/errno.h \
+  ../../include/kern/unistd.h ../../include/kern/stat.h \
+  ../../include/vnode.h ../../include/uio.h ../../include/dev.h
+vfscwd.o: ../../fs/vfs/vfscwd.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/synch.h ../../include/kern/errno.h \
+  ../../include/kern/stat.h ../../include/vfs.h ../../include/fs.h \
+  ../../include/vnode.h ../../include/uio.h ../../include/thread.h \
+  machine/pcb.h ../../include/curthread.h
+vfslist.o: ../../fs/vfs/vfslist.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/synch.h ../../include/array.h ../../include/kern/errno.h \
+  ../../include/vfs.h ../../include/vnode.h ../../include/fs.h \
+  ../../include/dev.h
+vfslookup.o: ../../fs/vfs/vfslookup.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/kern/limits.h ../../include/lib.h machine/setjmp.h \
+  ../../include/synch.h ../../include/vfs.h ../../include/vnode.h \
+  ../../include/fs.h
+vfspath.o: ../../fs/vfs/vfspath.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/kern/limits.h ../../include/kern/unistd.h \
+  ../../include/vfs.h ../../include/vnode.h ../../include/lib.h \
+  machine/setjmp.h
+vnode.o: ../../fs/vfs/vnode.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../include/synch.h \
+  ../../include/vnode.h
+devnull.o: ../../fs/vfs/devnull.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../include/vfs.h \
+  ../../include/dev.h ../../include/uio.h
+hardclock.o: ../../thread/hardclock.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h machine/spl.h ../../include/thread.h machine/pcb.h \
+  ../../include/clock.h opt-synchprobs.h
+synch.o: ../../thread/synch.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/synch.h ../../include/thread.h machine/pcb.h \
+  ../../include/curthread.h machine/spl.h
+scheduler.o: ../../thread/scheduler.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/scheduler.h ../../include/thread.h \
+  machine/pcb.h machine/spl.h ../../include/queue.h
+thread.o: ../../thread/thread.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/kern/errno.h ../../include/array.h machine/spl.h \
+  machine/pcb.h ../../include/thread.h ../../include/curthread.h \
+  ../../include/scheduler.h ../../include/addrspace.h ../../include/vm.h \
+  machine/vm.h opt-dumbvm.h machine/tlb.h ../../include/vnode.h \
+  opt-synchprobs.h
+main.o: ../../main/main.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/kern/unistd.h ../../include/lib.h machine/setjmp.h \
+  machine/spl.h ../../include/test.h ../../include/synch.h \
+  ../../include/thread.h machine/pcb.h ../../include/scheduler.h \
+  ../../include/dev.h ../../include/vfs.h ../../include/vm.h machine/vm.h \
+  ../../include/syscall.h ../../include/version.h ../../include/swap.h \
+  ../../include/vnode.h ../../include/uio.h ../../include/bitmap.h
+menu.o: ../../main/menu.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/kern/unistd.h ../../include/kern/limits.h \
+  ../../include/lib.h machine/setjmp.h ../../include/clock.h \
+  opt-synchprobs.h ../../include/thread.h machine/pcb.h \
+  ../../include/syscall.h ../../include/uio.h ../../include/vfs.h \
+  ../../include/sfs.h ../../include/vnode.h ../../include/fs.h \
+  ../../include/kern/sfs.h ../../include/test.h opt-synchprobs.h \
+  opt-sfs.h opt-net.h
+hello.o: ../../main/hello.c
+loadelf.o: ../../userprog/loadelf.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../include/uio.h \
+  ../../include/elf.h ../../include/addrspace.h ../../include/vm.h \
+  machine/vm.h opt-dumbvm.h ../../include/array.h machine/spl.h \
+  machine/tlb.h ../../include/thread.h machine/pcb.h \
+  ../../include/curthread.h ../../include/vnode.h
+runprogram.o: ../../userprog/runprogram.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/kern/unistd.h \
+  ../../include/kern/errno.h ../../include/lib.h machine/setjmp.h \
+  ../../include/addrspace.h ../../include/vm.h machine/vm.h opt-dumbvm.h \
+  ../../include/array.h machine/spl.h machine/tlb.h \
+  ../../include/thread.h machine/pcb.h ../../include/curthread.h \
+  ../../include/vfs.h ../../include/test.h
+uio.o: ../../userprog/uio.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/uio.h ../../include/thread.h machine/pcb.h \
+  ../../include/curthread.h
+lpage.o: ../../vm/lpage.c ../../include/lpage.h ../../include/types.h \
+  machine/types.h ../../include/kern/types.h machine/vm.h \
+  ../../include/kern/errno.h ../../include/lib.h machine/setjmp.h \
+  ../../include/thread.h machine/pcb.h ../../include/addrspace.h \
+  ../../include/vm.h opt-dumbvm.h ../../include/array.h machine/spl.h \
+  machine/tlb.h ../../include/synch.h ../../include/swap.h \
+  ../../include/vnode.h ../../include/uio.h ../../include/bitmap.h \
+  machine/coremap.h ../../include/curthread.h
+vm.o: ../../vm/vm.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/lib.h machine/setjmp.h ../../include/thread.h \
+  machine/pcb.h ../../include/curthread.h ../../include/addrspace.h \
+  ../../include/vm.h machine/vm.h opt-dumbvm.h ../../include/array.h \
+  machine/spl.h machine/tlb.h machine/coremap.h ../../include/lpage.h \
+  ../../include/synch.h ../../include/swap.h ../../include/vnode.h \
+  ../../include/uio.h ../../include/bitmap.h
+vm_object.o: ../../vm/vm_object.c ../../include/vm.h \
+  ../../include/types.h machine/types.h ../../include/kern/types.h \
+  machine/vm.h ../../include/kern/errno.h ../../include/lib.h \
+  machine/setjmp.h ../../include/array.h
+swap.o: ../../vm/swap.c ../../include/swap.h ../../include/synch.h \
+  ../../include/types.h machine/types.h ../../include/kern/types.h \
+  machine/vm.h ../../include/kern/errno.h ../../include/lib.h \
+  machine/setjmp.h ../../include/vm.h ../../include/vnode.h \
+  ../../include/uio.h ../../include/bitmap.h ../../include/kern/limits.h \
+  ../../include/kern/unistd.h ../../include/vfs.h \
+  ../../include/kern/stat.h
+arraytest.o: ../../test/arraytest.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/array.h ../../include/test.h
+bitmaptest.o: ../../test/bitmaptest.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/bitmap.h ../../include/test.h
+queuetest.o: ../../test/queuetest.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/queue.h ../../include/test.h
+threadtest.o: ../../test/threadtest.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/synch.h ../../include/thread.h \
+  machine/pcb.h ../../include/test.h
+tt3.o: ../../test/tt3.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  machine/spl.h ../../include/synch.h ../../include/thread.h \
+  machine/pcb.h ../../include/test.h opt-synchprobs.h
+synchtest.o: ../../test/synchtest.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
+  ../../include/synch.h ../../include/thread.h machine/pcb.h \
+  ../../include/test.h ../../include/clock.h opt-synchprobs.h
+malloctest.o: ../../test/malloctest.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../include/synch.h ../../include/thread.h \
+  machine/pcb.h ../../include/test.h
+fstest.o: ../../test/fstest.c ../../include/types.h machine/types.h \
+  ../../include/kern/types.h ../../include/kern/errno.h \
+  ../../include/kern/unistd.h ../../include/lib.h machine/setjmp.h \
+  ../../include/synch.h ../../include/fs.h ../../include/vnode.h \
+  ../../include/vfs.h ../../include/uio.h ../../include/test.h \
+  ../../include/thread.h machine/pcb.h
+autoconf.o: ../../compile/ASST3/autoconf.c ../../include/types.h \
+  machine/types.h ../../include/kern/types.h ../../include/lib.h \
+  machine/setjmp.h ../../compile/ASST3/autoconf.h
diff --git a/src/kern/compile/ASST3/device.o b/src/kern/compile/ASST3/device.o
new file mode 100644
index 0000000..bff28eb
Binary files /dev/null and b/src/kern/compile/ASST3/device.o differ
diff --git a/src/kern/compile/ASST3/devnull.o b/src/kern/compile/ASST3/devnull.o
new file mode 100644
index 0000000..2cdd4ca
Binary files /dev/null and b/src/kern/compile/ASST3/devnull.o differ
diff --git a/src/kern/compile/ASST3/emu.o b/src/kern/compile/ASST3/emu.o
new file mode 100644
index 0000000..ce2308b
Binary files /dev/null and b/src/kern/compile/ASST3/emu.o differ
diff --git a/src/kern/compile/ASST3/emu_att.o b/src/kern/compile/ASST3/emu_att.o
new file mode 100644
index 0000000..cfed08e
Binary files /dev/null and b/src/kern/compile/ASST3/emu_att.o differ
diff --git a/src/kern/compile/ASST3/exception.o b/src/kern/compile/ASST3/exception.o
new file mode 100644
index 0000000..319c7dd
Binary files /dev/null and b/src/kern/compile/ASST3/exception.o differ
diff --git a/src/kern/compile/ASST3/files.mk b/src/kern/compile/ASST3/files.mk
new file mode 100644
index 0000000..cacea14
--- /dev/null
+++ b/src/kern/compile/ASST3/files.mk
@@ -0,0 +1,476 @@
+# Automatically generated by config; do not edit
+lhd.o: ${S}/dev/lamebus/lhd.c
+	${COMPILE.c} ${S}/dev/lamebus/lhd.c
+SRCS+=${S}/dev/lamebus/lhd.c
+OBJS+=lhd.o
+
+emu.o: ${S}/dev/lamebus/emu.c
+	${COMPILE.c} ${S}/dev/lamebus/emu.c
+SRCS+=${S}/dev/lamebus/emu.c
+OBJS+=emu.o
+
+random.o: ${S}/dev/generic/random.c
+	${COMPILE.c} ${S}/dev/generic/random.c
+SRCS+=${S}/dev/generic/random.c
+OBJS+=random.o
+
+rtclock.o: ${S}/dev/generic/rtclock.c
+	${COMPILE.c} ${S}/dev/generic/rtclock.c
+SRCS+=${S}/dev/generic/rtclock.c
+OBJS+=rtclock.o
+
+pseudorand.o: ${S}/dev/generic/pseudorand.c
+	${COMPILE.c} ${S}/dev/generic/pseudorand.c
+SRCS+=${S}/dev/generic/pseudorand.c
+OBJS+=pseudorand.o
+
+ltrace.o: ${S}/dev/lamebus/ltrace.c
+	${COMPILE.c} ${S}/dev/lamebus/ltrace.c
+SRCS+=${S}/dev/lamebus/ltrace.c
+OBJS+=ltrace.o
+
+lamebus.o: ${S}/dev/lamebus/lamebus.c
+	${COMPILE.c} ${S}/dev/lamebus/lamebus.c
+SRCS+=${S}/dev/lamebus/lamebus.c
+OBJS+=lamebus.o
+
+console.o: ${S}/dev/generic/console.c
+	${COMPILE.c} ${S}/dev/generic/console.c
+SRCS+=${S}/dev/generic/console.c
+OBJS+=console.o
+
+lser.o: ${S}/dev/lamebus/lser.c
+	${COMPILE.c} ${S}/dev/lamebus/lser.c
+SRCS+=${S}/dev/lamebus/lser.c
+OBJS+=lser.o
+
+beep.o: ${S}/dev/generic/beep.c
+	${COMPILE.c} ${S}/dev/generic/beep.c
+SRCS+=${S}/dev/generic/beep.c
+OBJS+=beep.o
+
+lrandom.o: ${S}/dev/lamebus/lrandom.c
+	${COMPILE.c} ${S}/dev/lamebus/lrandom.c
+SRCS+=${S}/dev/lamebus/lrandom.c
+OBJS+=lrandom.o
+
+ltimer.o: ${S}/dev/lamebus/ltimer.c
+	${COMPILE.c} ${S}/dev/lamebus/ltimer.c
+SRCS+=${S}/dev/lamebus/ltimer.c
+OBJS+=ltimer.o
+
+rtclock_ltimer.o: ${S}/dev/lamebus/rtclock_ltimer.c
+	${COMPILE.c} ${S}/dev/lamebus/rtclock_ltimer.c
+SRCS+=${S}/dev/lamebus/rtclock_ltimer.c
+OBJS+=rtclock_ltimer.o
+
+emu_att.o: ${S}/dev/lamebus/emu_att.c
+	${COMPILE.c} ${S}/dev/lamebus/emu_att.c
+SRCS+=${S}/dev/lamebus/emu_att.c
+OBJS+=emu_att.o
+
+random_lrandom.o: ${S}/dev/lamebus/random_lrandom.c
+	${COMPILE.c} ${S}/dev/lamebus/random_lrandom.c
+SRCS+=${S}/dev/lamebus/random_lrandom.c
+OBJS+=random_lrandom.o
+
+beep_ltimer.o: ${S}/dev/lamebus/beep_ltimer.c
+	${COMPILE.c} ${S}/dev/lamebus/beep_ltimer.c
+SRCS+=${S}/dev/lamebus/beep_ltimer.c
+OBJS+=beep_ltimer.o
+
+ltrace_att.o: ${S}/dev/lamebus/ltrace_att.c
+	${COMPILE.c} ${S}/dev/lamebus/ltrace_att.c
+SRCS+=${S}/dev/lamebus/ltrace_att.c
+OBJS+=ltrace_att.o
+
+pseudorand_att.o: ${S}/dev/generic/pseudorand_att.c
+	${COMPILE.c} ${S}/dev/generic/pseudorand_att.c
+SRCS+=${S}/dev/generic/pseudorand_att.c
+OBJS+=pseudorand_att.o
+
+con_lser.o: ${S}/dev/lamebus/con_lser.c
+	${COMPILE.c} ${S}/dev/lamebus/con_lser.c
+SRCS+=${S}/dev/lamebus/con_lser.c
+OBJS+=con_lser.o
+
+lrandom_att.o: ${S}/dev/lamebus/lrandom_att.c
+	${COMPILE.c} ${S}/dev/lamebus/lrandom_att.c
+SRCS+=${S}/dev/lamebus/lrandom_att.c
+OBJS+=lrandom_att.o
+
+lser_att.o: ${S}/dev/lamebus/lser_att.c
+	${COMPILE.c} ${S}/dev/lamebus/lser_att.c
+SRCS+=${S}/dev/lamebus/lser_att.c
+OBJS+=lser_att.o
+
+lhd_att.o: ${S}/dev/lamebus/lhd_att.c
+	${COMPILE.c} ${S}/dev/lamebus/lhd_att.c
+SRCS+=${S}/dev/lamebus/lhd_att.c
+OBJS+=lhd_att.o
+
+ltimer_att.o: ${S}/dev/lamebus/ltimer_att.c
+	${COMPILE.c} ${S}/dev/lamebus/ltimer_att.c
+SRCS+=${S}/dev/lamebus/ltimer_att.c
+OBJS+=ltimer_att.o
+
+sfs_io.o: ${S}/fs/sfs/sfs_io.c
+	${COMPILE.c} ${S}/fs/sfs/sfs_io.c
+SRCS+=${S}/fs/sfs/sfs_io.c
+OBJS+=sfs_io.o
+
+sfs_fs.o: ${S}/fs/sfs/sfs_fs.c
+	${COMPILE.c} ${S}/fs/sfs/sfs_fs.c
+SRCS+=${S}/fs/sfs/sfs_fs.c
+OBJS+=sfs_fs.o
+
+sfs_vnode.o: ${S}/fs/sfs/sfs_vnode.c
+	${COMPILE.c} ${S}/fs/sfs/sfs_vnode.c
+SRCS+=${S}/fs/sfs/sfs_vnode.c
+OBJS+=sfs_vnode.o
+
+addrspace.o: ${S}/vm/addrspace.c
+	${COMPILE.c} ${S}/vm/addrspace.c
+SRCS+=${S}/vm/addrspace.c
+OBJS+=addrspace.o
+
+cache_mips1.o: ${S}/arch/mips/mips/cache_mips1.S
+	${COMPILE.S} ${S}/arch/mips/mips/cache_mips1.S
+SRCS+=${S}/arch/mips/mips/cache_mips1.S
+OBJS+=cache_mips1.o
+
+exception.o: ${S}/arch/mips/mips/exception.S
+	${COMPILE.S} ${S}/arch/mips/mips/exception.S
+SRCS+=${S}/arch/mips/mips/exception.S
+OBJS+=exception.o
+
+lamebus_mips.o: ${S}/arch/mips/mips/lamebus_mips.c
+	${COMPILE.c} ${S}/arch/mips/mips/lamebus_mips.c
+SRCS+=${S}/arch/mips/mips/lamebus_mips.c
+OBJS+=lamebus_mips.o
+
+interrupt.o: ${S}/arch/mips/mips/interrupt.c
+	${COMPILE.c} ${S}/arch/mips/mips/interrupt.c
+SRCS+=${S}/arch/mips/mips/interrupt.c
+OBJS+=interrupt.o
+
+pcb.o: ${S}/arch/mips/mips/pcb.c
+	${COMPILE.c} ${S}/arch/mips/mips/pcb.c
+SRCS+=${S}/arch/mips/mips/pcb.c
+OBJS+=pcb.o
+
+ram.o: ${S}/arch/mips/mips/ram.c
+	${COMPILE.c} ${S}/arch/mips/mips/ram.c
+SRCS+=${S}/arch/mips/mips/ram.c
+OBJS+=ram.o
+
+spl.o: ${S}/arch/mips/mips/spl.c
+	${COMPILE.c} ${S}/arch/mips/mips/spl.c
+SRCS+=${S}/arch/mips/mips/spl.c
+OBJS+=spl.o
+
+start.o: ${S}/arch/mips/mips/start.S
+	${COMPILE.S} ${S}/arch/mips/mips/start.S
+SRCS+=${S}/arch/mips/mips/start.S
+OBJS+=start.o
+
+switch.o: ${S}/arch/mips/mips/switch.S
+	${COMPILE.S} ${S}/arch/mips/mips/switch.S
+SRCS+=${S}/arch/mips/mips/switch.S
+OBJS+=switch.o
+
+syscall.o: ${S}/arch/mips/mips/syscall.c
+	${COMPILE.c} ${S}/arch/mips/mips/syscall.c
+SRCS+=${S}/arch/mips/mips/syscall.c
+OBJS+=syscall.o
+
+threadstart.o: ${S}/arch/mips/mips/threadstart.S
+	${COMPILE.S} ${S}/arch/mips/mips/threadstart.S
+SRCS+=${S}/arch/mips/mips/threadstart.S
+OBJS+=threadstart.o
+
+trap.o: ${S}/arch/mips/mips/trap.c
+	${COMPILE.c} ${S}/arch/mips/mips/trap.c
+SRCS+=${S}/arch/mips/mips/trap.c
+OBJS+=trap.o
+
+tlb_mips1.o: ${S}/arch/mips/mips/tlb_mips1.S
+	${COMPILE.S} ${S}/arch/mips/mips/tlb_mips1.S
+SRCS+=${S}/arch/mips/mips/tlb_mips1.S
+OBJS+=tlb_mips1.o
+
+mips-setjmp.o: ${S}/../lib/libc/mips-setjmp.S
+	${COMPILE.S} ${S}/../lib/libc/mips-setjmp.S
+SRCS+=${S}/../lib/libc/mips-setjmp.S
+OBJS+=mips-setjmp.o
+
+copyinout.o: ${S}/lib/copyinout.c
+	${COMPILE.c} ${S}/lib/copyinout.c
+SRCS+=${S}/lib/copyinout.c
+OBJS+=copyinout.o
+
+coremap.o: ${S}/arch/mips/mips/coremap.c
+	${COMPILE.c} ${S}/arch/mips/mips/coremap.c
+SRCS+=${S}/arch/mips/mips/coremap.c
+OBJS+=coremap.o
+
+array.o: ${S}/lib/array.c
+	${COMPILE.c} ${S}/lib/array.c
+SRCS+=${S}/lib/array.c
+OBJS+=array.o
+
+bitmap.o: ${S}/lib/bitmap.c
+	${COMPILE.c} ${S}/lib/bitmap.c
+SRCS+=${S}/lib/bitmap.c
+OBJS+=bitmap.o
+
+queue.o: ${S}/lib/queue.c
+	${COMPILE.c} ${S}/lib/queue.c
+SRCS+=${S}/lib/queue.c
+OBJS+=queue.o
+
+kheap.o: ${S}/lib/kheap.c
+	${COMPILE.c} ${S}/lib/kheap.c
+SRCS+=${S}/lib/kheap.c
+OBJS+=kheap.o
+
+kprintf.o: ${S}/lib/kprintf.c
+	${COMPILE.c} ${S}/lib/kprintf.c
+SRCS+=${S}/lib/kprintf.c
+OBJS+=kprintf.o
+
+kgets.o: ${S}/lib/kgets.c
+	${COMPILE.c} ${S}/lib/kgets.c
+SRCS+=${S}/lib/kgets.c
+OBJS+=kgets.o
+
+misc.o: ${S}/lib/misc.c
+	${COMPILE.c} ${S}/lib/misc.c
+SRCS+=${S}/lib/misc.c
+OBJS+=misc.o
+
+ntoh.o: ${S}/lib/ntoh.c
+	${COMPILE.c} ${S}/lib/ntoh.c
+SRCS+=${S}/lib/ntoh.c
+OBJS+=ntoh.o
+
+__printf.o: ${S}/../lib/libc/__printf.c
+	${COMPILE.c} ${S}/../lib/libc/__printf.c
+SRCS+=${S}/../lib/libc/__printf.c
+OBJS+=__printf.o
+
+snprintf.o: ${S}/../lib/libc/snprintf.c
+	${COMPILE.c} ${S}/../lib/libc/snprintf.c
+SRCS+=${S}/../lib/libc/snprintf.c
+OBJS+=snprintf.o
+
+atoi.o: ${S}/../lib/libc/atoi.c
+	${COMPILE.c} ${S}/../lib/libc/atoi.c
+SRCS+=${S}/../lib/libc/atoi.c
+OBJS+=atoi.o
+
+bzero.o: ${S}/../lib/libc/bzero.c
+	${COMPILE.c} ${S}/../lib/libc/bzero.c
+SRCS+=${S}/../lib/libc/bzero.c
+OBJS+=bzero.o
+
+memcpy.o: ${S}/../lib/libc/memcpy.c
+	${COMPILE.c} ${S}/../lib/libc/memcpy.c
+SRCS+=${S}/../lib/libc/memcpy.c
+OBJS+=memcpy.o
+
+memmove.o: ${S}/../lib/libc/memmove.c
+	${COMPILE.c} ${S}/../lib/libc/memmove.c
+SRCS+=${S}/../lib/libc/memmove.c
+OBJS+=memmove.o
+
+strcat.o: ${S}/../lib/libc/strcat.c
+	${COMPILE.c} ${S}/../lib/libc/strcat.c
+SRCS+=${S}/../lib/libc/strcat.c
+OBJS+=strcat.o
+
+strchr.o: ${S}/../lib/libc/strchr.c
+	${COMPILE.c} ${S}/../lib/libc/strchr.c
+SRCS+=${S}/../lib/libc/strchr.c
+OBJS+=strchr.o
+
+strcmp.o: ${S}/../lib/libc/strcmp.c
+	${COMPILE.c} ${S}/../lib/libc/strcmp.c
+SRCS+=${S}/../lib/libc/strcmp.c
+OBJS+=strcmp.o
+
+strcpy.o: ${S}/../lib/libc/strcpy.c
+	${COMPILE.c} ${S}/../lib/libc/strcpy.c
+SRCS+=${S}/../lib/libc/strcpy.c
+OBJS+=strcpy.o
+
+strlen.o: ${S}/../lib/libc/strlen.c
+	${COMPILE.c} ${S}/../lib/libc/strlen.c
+SRCS+=${S}/../lib/libc/strlen.c
+OBJS+=strlen.o
+
+strrchr.o: ${S}/../lib/libc/strrchr.c
+	${COMPILE.c} ${S}/../lib/libc/strrchr.c
+SRCS+=${S}/../lib/libc/strrchr.c
+OBJS+=strrchr.o
+
+strtok_r.o: ${S}/../lib/libc/strtok_r.c
+	${COMPILE.c} ${S}/../lib/libc/strtok_r.c
+SRCS+=${S}/../lib/libc/strtok_r.c
+OBJS+=strtok_r.o
+
+init.o: ${S}/dev/init.c
+	${COMPILE.c} ${S}/dev/init.c
+SRCS+=${S}/dev/init.c
+OBJS+=init.o
+
+device.o: ${S}/fs/vfs/device.c
+	${COMPILE.c} ${S}/fs/vfs/device.c
+SRCS+=${S}/fs/vfs/device.c
+OBJS+=device.o
+
+vfscwd.o: ${S}/fs/vfs/vfscwd.c
+	${COMPILE.c} ${S}/fs/vfs/vfscwd.c
+SRCS+=${S}/fs/vfs/vfscwd.c
+OBJS+=vfscwd.o
+
+vfslist.o: ${S}/fs/vfs/vfslist.c
+	${COMPILE.c} ${S}/fs/vfs/vfslist.c
+SRCS+=${S}/fs/vfs/vfslist.c
+OBJS+=vfslist.o
+
+vfslookup.o: ${S}/fs/vfs/vfslookup.c
+	${COMPILE.c} ${S}/fs/vfs/vfslookup.c
+SRCS+=${S}/fs/vfs/vfslookup.c
+OBJS+=vfslookup.o
+
+vfspath.o: ${S}/fs/vfs/vfspath.c
+	${COMPILE.c} ${S}/fs/vfs/vfspath.c
+SRCS+=${S}/fs/vfs/vfspath.c
+OBJS+=vfspath.o
+
+vnode.o: ${S}/fs/vfs/vnode.c
+	${COMPILE.c} ${S}/fs/vfs/vnode.c
+SRCS+=${S}/fs/vfs/vnode.c
+OBJS+=vnode.o
+
+devnull.o: ${S}/fs/vfs/devnull.c
+	${COMPILE.c} ${S}/fs/vfs/devnull.c
+SRCS+=${S}/fs/vfs/devnull.c
+OBJS+=devnull.o
+
+hardclock.o: ${S}/thread/hardclock.c
+	${COMPILE.c} ${S}/thread/hardclock.c
+SRCS+=${S}/thread/hardclock.c
+OBJS+=hardclock.o
+
+synch.o: ${S}/thread/synch.c
+	${COMPILE.c} ${S}/thread/synch.c
+SRCS+=${S}/thread/synch.c
+OBJS+=synch.o
+
+scheduler.o: ${S}/thread/scheduler.c
+	${COMPILE.c} ${S}/thread/scheduler.c
+SRCS+=${S}/thread/scheduler.c
+OBJS+=scheduler.o
+
+thread.o: ${S}/thread/thread.c
+	${COMPILE.c} ${S}/thread/thread.c
+SRCS+=${S}/thread/thread.c
+OBJS+=thread.o
+
+main.o: ${S}/main/main.c
+	${COMPILE.c} ${S}/main/main.c
+SRCS+=${S}/main/main.c
+OBJS+=main.o
+
+menu.o: ${S}/main/menu.c
+	${COMPILE.c} ${S}/main/menu.c
+SRCS+=${S}/main/menu.c
+OBJS+=menu.o
+
+hello.o: ${S}/main/hello.c
+	${COMPILE.c} ${S}/main/hello.c
+SRCS+=${S}/main/hello.c
+OBJS+=hello.o
+
+loadelf.o: ${S}/userprog/loadelf.c
+	${COMPILE.c} ${S}/userprog/loadelf.c
+SRCS+=${S}/userprog/loadelf.c
+OBJS+=loadelf.o
+
+runprogram.o: ${S}/userprog/runprogram.c
+	${COMPILE.c} ${S}/userprog/runprogram.c
+SRCS+=${S}/userprog/runprogram.c
+OBJS+=runprogram.o
+
+uio.o: ${S}/userprog/uio.c
+	${COMPILE.c} ${S}/userprog/uio.c
+SRCS+=${S}/userprog/uio.c
+OBJS+=uio.o
+
+lpage.o: ${S}/vm/lpage.c
+	${COMPILE.c} ${S}/vm/lpage.c
+SRCS+=${S}/vm/lpage.c
+OBJS+=lpage.o
+
+vm.o: ${S}/vm/vm.c
+	${COMPILE.c} ${S}/vm/vm.c
+SRCS+=${S}/vm/vm.c
+OBJS+=vm.o
+
+vm_object.o: ${S}/vm/vm_object.c
+	${COMPILE.c} ${S}/vm/vm_object.c
+SRCS+=${S}/vm/vm_object.c
+OBJS+=vm_object.o
+
+swap.o: ${S}/vm/swap.c
+	${COMPILE.c} ${S}/vm/swap.c
+SRCS+=${S}/vm/swap.c
+OBJS+=swap.o
+
+arraytest.o: ${S}/test/arraytest.c
+	${COMPILE.c} ${S}/test/arraytest.c
+SRCS+=${S}/test/arraytest.c
+OBJS+=arraytest.o
+
+bitmaptest.o: ${S}/test/bitmaptest.c
+	${COMPILE.c} ${S}/test/bitmaptest.c
+SRCS+=${S}/test/bitmaptest.c
+OBJS+=bitmaptest.o
+
+queuetest.o: ${S}/test/queuetest.c
+	${COMPILE.c} ${S}/test/queuetest.c
+SRCS+=${S}/test/queuetest.c
+OBJS+=queuetest.o
+
+threadtest.o: ${S}/test/threadtest.c
+	${COMPILE.c} ${S}/test/threadtest.c
+SRCS+=${S}/test/threadtest.c
+OBJS+=threadtest.o
+
+tt3.o: ${S}/test/tt3.c
+	${COMPILE.c} ${S}/test/tt3.c
+SRCS+=${S}/test/tt3.c
+OBJS+=tt3.o
+
+synchtest.o: ${S}/test/synchtest.c
+	${COMPILE.c} ${S}/test/synchtest.c
+SRCS+=${S}/test/synchtest.c
+OBJS+=synchtest.o
+
+malloctest.o: ${S}/test/malloctest.c
+	${COMPILE.c} ${S}/test/malloctest.c
+SRCS+=${S}/test/malloctest.c
+OBJS+=malloctest.o
+
+fstest.o: ${S}/test/fstest.c
+	${COMPILE.c} ${S}/test/fstest.c
+SRCS+=${S}/test/fstest.c
+OBJS+=fstest.o
+
+autoconf.o: ${S}/compile/ASST3/autoconf.c
+	${COMPILE.c} ${S}/compile/ASST3/autoconf.c
+SRCS+=${S}/compile/ASST3/autoconf.c
+OBJS+=autoconf.o
+
diff --git a/src/kern/compile/ASST3/fstest.o b/src/kern/compile/ASST3/fstest.o
new file mode 100644
index 0000000..ed69d54
Binary files /dev/null and b/src/kern/compile/ASST3/fstest.o differ
diff --git a/src/kern/compile/ASST3/hardclock.o b/src/kern/compile/ASST3/hardclock.o
new file mode 100644
index 0000000..3b8a41c
Binary files /dev/null and b/src/kern/compile/ASST3/hardclock.o differ
diff --git a/src/kern/compile/ASST3/hello.o b/src/kern/compile/ASST3/hello.o
new file mode 100644
index 0000000..5ece9d5
Binary files /dev/null and b/src/kern/compile/ASST3/hello.o differ
diff --git a/src/kern/compile/ASST3/init.o b/src/kern/compile/ASST3/init.o
new file mode 100644
index 0000000..27336dd
Binary files /dev/null and b/src/kern/compile/ASST3/init.o differ
diff --git a/src/kern/compile/ASST3/interrupt.o b/src/kern/compile/ASST3/interrupt.o
new file mode 100644
index 0000000..1645b40
Binary files /dev/null and b/src/kern/compile/ASST3/interrupt.o differ
diff --git a/src/kern/compile/ASST3/kernel b/src/kern/compile/ASST3/kernel
new file mode 100755
index 0000000..00f2dcd
Binary files /dev/null and b/src/kern/compile/ASST3/kernel differ
diff --git a/src/kern/compile/ASST3/kgets.o b/src/kern/compile/ASST3/kgets.o
new file mode 100644
index 0000000..0a121f5
Binary files /dev/null and b/src/kern/compile/ASST3/kgets.o differ
diff --git a/src/kern/compile/ASST3/kheap.o b/src/kern/compile/ASST3/kheap.o
new file mode 100644
index 0000000..97dde30
Binary files /dev/null and b/src/kern/compile/ASST3/kheap.o differ
diff --git a/src/kern/compile/ASST3/kprintf.o b/src/kern/compile/ASST3/kprintf.o
new file mode 100644
index 0000000..5192654
Binary files /dev/null and b/src/kern/compile/ASST3/kprintf.o differ
diff --git a/src/kern/compile/ASST3/lamebus.o b/src/kern/compile/ASST3/lamebus.o
new file mode 100644
index 0000000..739628f
Binary files /dev/null and b/src/kern/compile/ASST3/lamebus.o differ
diff --git a/src/kern/compile/ASST3/lamebus_mips.o b/src/kern/compile/ASST3/lamebus_mips.o
new file mode 100644
index 0000000..3f0ae54
Binary files /dev/null and b/src/kern/compile/ASST3/lamebus_mips.o differ
diff --git a/src/kern/compile/ASST3/lhd.o b/src/kern/compile/ASST3/lhd.o
new file mode 100644
index 0000000..f885f33
Binary files /dev/null and b/src/kern/compile/ASST3/lhd.o differ
diff --git a/src/kern/compile/ASST3/lhd_att.o b/src/kern/compile/ASST3/lhd_att.o
new file mode 100644
index 0000000..1cdcbf6
Binary files /dev/null and b/src/kern/compile/ASST3/lhd_att.o differ
diff --git a/src/kern/compile/ASST3/loadelf.o b/src/kern/compile/ASST3/loadelf.o
new file mode 100644
index 0000000..6cdac37
Binary files /dev/null and b/src/kern/compile/ASST3/loadelf.o differ
diff --git a/src/kern/compile/ASST3/lpage.o b/src/kern/compile/ASST3/lpage.o
new file mode 100644
index 0000000..894d566
Binary files /dev/null and b/src/kern/compile/ASST3/lpage.o differ
diff --git a/src/kern/compile/ASST3/lrandom.o b/src/kern/compile/ASST3/lrandom.o
new file mode 100644
index 0000000..e7a0dc6
Binary files /dev/null and b/src/kern/compile/ASST3/lrandom.o differ
diff --git a/src/kern/compile/ASST3/lrandom_att.o b/src/kern/compile/ASST3/lrandom_att.o
new file mode 100644
index 0000000..0725dd7
Binary files /dev/null and b/src/kern/compile/ASST3/lrandom_att.o differ
diff --git a/src/kern/compile/ASST3/lser.o b/src/kern/compile/ASST3/lser.o
new file mode 100644
index 0000000..b12a629
Binary files /dev/null and b/src/kern/compile/ASST3/lser.o differ
diff --git a/src/kern/compile/ASST3/lser_att.o b/src/kern/compile/ASST3/lser_att.o
new file mode 100644
index 0000000..3c441b1
Binary files /dev/null and b/src/kern/compile/ASST3/lser_att.o differ
diff --git a/src/kern/compile/ASST3/ltimer.o b/src/kern/compile/ASST3/ltimer.o
new file mode 100644
index 0000000..0f5b287
Binary files /dev/null and b/src/kern/compile/ASST3/ltimer.o differ
diff --git a/src/kern/compile/ASST3/ltimer_att.o b/src/kern/compile/ASST3/ltimer_att.o
new file mode 100644
index 0000000..b685ffa
Binary files /dev/null and b/src/kern/compile/ASST3/ltimer_att.o differ
diff --git a/src/kern/compile/ASST3/ltrace.o b/src/kern/compile/ASST3/ltrace.o
new file mode 100644
index 0000000..1b96633
Binary files /dev/null and b/src/kern/compile/ASST3/ltrace.o differ
diff --git a/src/kern/compile/ASST3/ltrace_att.o b/src/kern/compile/ASST3/ltrace_att.o
new file mode 100644
index 0000000..c995298
Binary files /dev/null and b/src/kern/compile/ASST3/ltrace_att.o differ
diff --git a/src/kern/compile/ASST3/machine b/src/kern/compile/ASST3/machine
new file mode 120000
index 0000000..c12f325
--- /dev/null
+++ b/src/kern/compile/ASST3/machine
@@ -0,0 +1 @@
+../../arch/mips/include
\ No newline at end of file
diff --git a/src/kern/compile/ASST3/main.o b/src/kern/compile/ASST3/main.o
new file mode 100644
index 0000000..9d00205
Binary files /dev/null and b/src/kern/compile/ASST3/main.o differ
diff --git a/src/kern/compile/ASST3/malloctest.o b/src/kern/compile/ASST3/malloctest.o
new file mode 100644
index 0000000..7e467de
Binary files /dev/null and b/src/kern/compile/ASST3/malloctest.o differ
diff --git a/src/kern/compile/ASST3/memcpy.o b/src/kern/compile/ASST3/memcpy.o
new file mode 100644
index 0000000..966d733
Binary files /dev/null and b/src/kern/compile/ASST3/memcpy.o differ
diff --git a/src/kern/compile/ASST3/memmove.o b/src/kern/compile/ASST3/memmove.o
new file mode 100644
index 0000000..4a30044
Binary files /dev/null and b/src/kern/compile/ASST3/memmove.o differ
diff --git a/src/kern/compile/ASST3/menu.o b/src/kern/compile/ASST3/menu.o
new file mode 100644
index 0000000..f8f4ca3
Binary files /dev/null and b/src/kern/compile/ASST3/menu.o differ
diff --git a/src/kern/compile/ASST3/mips-setjmp.o b/src/kern/compile/ASST3/mips-setjmp.o
new file mode 100644
index 0000000..4eab279
Binary files /dev/null and b/src/kern/compile/ASST3/mips-setjmp.o differ
diff --git a/src/kern/compile/ASST3/misc.o b/src/kern/compile/ASST3/misc.o
new file mode 100644
index 0000000..2d11218
Binary files /dev/null and b/src/kern/compile/ASST3/misc.o differ
diff --git a/src/kern/compile/ASST3/ntoh.o b/src/kern/compile/ASST3/ntoh.o
new file mode 100644
index 0000000..3616841
Binary files /dev/null and b/src/kern/compile/ASST3/ntoh.o differ
diff --git a/src/kern/compile/ASST3/opt-dumbvm.h b/src/kern/compile/ASST3/opt-dumbvm.h
new file mode 100644
index 0000000..ecf2b64
--- /dev/null
+++ b/src/kern/compile/ASST3/opt-dumbvm.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_DUMBVM_H_
+#define _OPT_DUMBVM_H_
+#define OPT_DUMBVM 0
+#endif /* _OPT_DUMBVM_H_ */
diff --git a/src/kern/compile/ASST3/opt-net.h b/src/kern/compile/ASST3/opt-net.h
new file mode 100644
index 0000000..0340a83
--- /dev/null
+++ b/src/kern/compile/ASST3/opt-net.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_NET_H_
+#define _OPT_NET_H_
+#define OPT_NET 0
+#endif /* _OPT_NET_H_ */
diff --git a/src/kern/compile/ASST3/opt-netfs.h b/src/kern/compile/ASST3/opt-netfs.h
new file mode 100644
index 0000000..cd21c56
--- /dev/null
+++ b/src/kern/compile/ASST3/opt-netfs.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_NETFS_H_
+#define _OPT_NETFS_H_
+#define OPT_NETFS 0
+#endif /* _OPT_NETFS_H_ */
diff --git a/src/kern/compile/ASST3/opt-sfs.h b/src/kern/compile/ASST3/opt-sfs.h
new file mode 100644
index 0000000..94095ad
--- /dev/null
+++ b/src/kern/compile/ASST3/opt-sfs.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_SFS_H_
+#define _OPT_SFS_H_
+#define OPT_SFS 1
+#endif /* _OPT_SFS_H_ */
diff --git a/src/kern/compile/ASST3/opt-synchprobs.h b/src/kern/compile/ASST3/opt-synchprobs.h
new file mode 100644
index 0000000..9114407
--- /dev/null
+++ b/src/kern/compile/ASST3/opt-synchprobs.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_SYNCHPROBS_H_
+#define _OPT_SYNCHPROBS_H_
+#define OPT_SYNCHPROBS 0
+#endif /* _OPT_SYNCHPROBS_H_ */
diff --git a/src/kern/compile/ASST3/pcb.o b/src/kern/compile/ASST3/pcb.o
new file mode 100644
index 0000000..a842dd6
Binary files /dev/null and b/src/kern/compile/ASST3/pcb.o differ
diff --git a/src/kern/compile/ASST3/pseudorand.o b/src/kern/compile/ASST3/pseudorand.o
new file mode 100644
index 0000000..afb4509
Binary files /dev/null and b/src/kern/compile/ASST3/pseudorand.o differ
diff --git a/src/kern/compile/ASST3/pseudorand_att.o b/src/kern/compile/ASST3/pseudorand_att.o
new file mode 100644
index 0000000..7911626
Binary files /dev/null and b/src/kern/compile/ASST3/pseudorand_att.o differ
diff --git a/src/kern/compile/ASST3/queue.o b/src/kern/compile/ASST3/queue.o
new file mode 100644
index 0000000..11e7312
Binary files /dev/null and b/src/kern/compile/ASST3/queue.o differ
diff --git a/src/kern/compile/ASST3/queuetest.o b/src/kern/compile/ASST3/queuetest.o
new file mode 100644
index 0000000..536bd1b
Binary files /dev/null and b/src/kern/compile/ASST3/queuetest.o differ
diff --git a/src/kern/compile/ASST3/ram.o b/src/kern/compile/ASST3/ram.o
new file mode 100644
index 0000000..5dc05da
Binary files /dev/null and b/src/kern/compile/ASST3/ram.o differ
diff --git a/src/kern/compile/ASST3/random.o b/src/kern/compile/ASST3/random.o
new file mode 100644
index 0000000..8c3aeb6
Binary files /dev/null and b/src/kern/compile/ASST3/random.o differ
diff --git a/src/kern/compile/ASST3/random_lrandom.o b/src/kern/compile/ASST3/random_lrandom.o
new file mode 100644
index 0000000..1cc2a6a
Binary files /dev/null and b/src/kern/compile/ASST3/random_lrandom.o differ
diff --git a/src/kern/compile/ASST3/rtclock.o b/src/kern/compile/ASST3/rtclock.o
new file mode 100644
index 0000000..0b6685f
Binary files /dev/null and b/src/kern/compile/ASST3/rtclock.o differ
diff --git a/src/kern/compile/ASST3/rtclock_ltimer.o b/src/kern/compile/ASST3/rtclock_ltimer.o
new file mode 100644
index 0000000..94ff684
Binary files /dev/null and b/src/kern/compile/ASST3/rtclock_ltimer.o differ
diff --git a/src/kern/compile/ASST3/runprogram.o b/src/kern/compile/ASST3/runprogram.o
new file mode 100644
index 0000000..d31a8c4
Binary files /dev/null and b/src/kern/compile/ASST3/runprogram.o differ
diff --git a/src/kern/compile/ASST3/scheduler.o b/src/kern/compile/ASST3/scheduler.o
new file mode 100644
index 0000000..faee8cf
Binary files /dev/null and b/src/kern/compile/ASST3/scheduler.o differ
diff --git a/src/kern/compile/ASST3/sfs_fs.o b/src/kern/compile/ASST3/sfs_fs.o
new file mode 100644
index 0000000..c10a570
Binary files /dev/null and b/src/kern/compile/ASST3/sfs_fs.o differ
diff --git a/src/kern/compile/ASST3/sfs_io.o b/src/kern/compile/ASST3/sfs_io.o
new file mode 100644
index 0000000..e5ab4c7
Binary files /dev/null and b/src/kern/compile/ASST3/sfs_io.o differ
diff --git a/src/kern/compile/ASST3/sfs_vnode.o b/src/kern/compile/ASST3/sfs_vnode.o
new file mode 100644
index 0000000..d2c4d7a
Binary files /dev/null and b/src/kern/compile/ASST3/sfs_vnode.o differ
diff --git a/src/kern/compile/ASST3/snprintf.o b/src/kern/compile/ASST3/snprintf.o
new file mode 100644
index 0000000..5d47455
Binary files /dev/null and b/src/kern/compile/ASST3/snprintf.o differ
diff --git a/src/kern/compile/ASST3/spl.o b/src/kern/compile/ASST3/spl.o
new file mode 100644
index 0000000..e401027
Binary files /dev/null and b/src/kern/compile/ASST3/spl.o differ
diff --git a/src/kern/compile/ASST3/start.o b/src/kern/compile/ASST3/start.o
new file mode 100644
index 0000000..baf88bc
Binary files /dev/null and b/src/kern/compile/ASST3/start.o differ
diff --git a/src/kern/compile/ASST3/strcat.o b/src/kern/compile/ASST3/strcat.o
new file mode 100644
index 0000000..2105e58
Binary files /dev/null and b/src/kern/compile/ASST3/strcat.o differ
diff --git a/src/kern/compile/ASST3/strchr.o b/src/kern/compile/ASST3/strchr.o
new file mode 100644
index 0000000..ab84456
Binary files /dev/null and b/src/kern/compile/ASST3/strchr.o differ
diff --git a/src/kern/compile/ASST3/strcmp.o b/src/kern/compile/ASST3/strcmp.o
new file mode 100644
index 0000000..bb87aeb
Binary files /dev/null and b/src/kern/compile/ASST3/strcmp.o differ
diff --git a/src/kern/compile/ASST3/strcpy.o b/src/kern/compile/ASST3/strcpy.o
new file mode 100644
index 0000000..c82105e
Binary files /dev/null and b/src/kern/compile/ASST3/strcpy.o differ
diff --git a/src/kern/compile/ASST3/strlen.o b/src/kern/compile/ASST3/strlen.o
new file mode 100644
index 0000000..d639d0e
Binary files /dev/null and b/src/kern/compile/ASST3/strlen.o differ
diff --git a/src/kern/compile/ASST3/strrchr.o b/src/kern/compile/ASST3/strrchr.o
new file mode 100644
index 0000000..b843b5f
Binary files /dev/null and b/src/kern/compile/ASST3/strrchr.o differ
diff --git a/src/kern/compile/ASST3/strtok_r.o b/src/kern/compile/ASST3/strtok_r.o
new file mode 100644
index 0000000..30ac864
Binary files /dev/null and b/src/kern/compile/ASST3/strtok_r.o differ
diff --git a/src/kern/compile/ASST3/swap.o b/src/kern/compile/ASST3/swap.o
new file mode 100644
index 0000000..8b6b6a1
Binary files /dev/null and b/src/kern/compile/ASST3/swap.o differ
diff --git a/src/kern/compile/ASST3/switch.o b/src/kern/compile/ASST3/switch.o
new file mode 100644
index 0000000..e671bbb
Binary files /dev/null and b/src/kern/compile/ASST3/switch.o differ
diff --git a/src/kern/compile/ASST3/synch.o b/src/kern/compile/ASST3/synch.o
new file mode 100644
index 0000000..829d744
Binary files /dev/null and b/src/kern/compile/ASST3/synch.o differ
diff --git a/src/kern/compile/ASST3/synchtest.o b/src/kern/compile/ASST3/synchtest.o
new file mode 100644
index 0000000..4358895
Binary files /dev/null and b/src/kern/compile/ASST3/synchtest.o differ
diff --git a/src/kern/compile/ASST3/syscall.o b/src/kern/compile/ASST3/syscall.o
new file mode 100644
index 0000000..82e2bf4
Binary files /dev/null and b/src/kern/compile/ASST3/syscall.o differ
diff --git a/src/kern/compile/ASST3/thread.o b/src/kern/compile/ASST3/thread.o
new file mode 100644
index 0000000..e149075
Binary files /dev/null and b/src/kern/compile/ASST3/thread.o differ
diff --git a/src/kern/compile/ASST3/threadstart.o b/src/kern/compile/ASST3/threadstart.o
new file mode 100644
index 0000000..3bbeabf
Binary files /dev/null and b/src/kern/compile/ASST3/threadstart.o differ
diff --git a/src/kern/compile/ASST3/threadtest.o b/src/kern/compile/ASST3/threadtest.o
new file mode 100644
index 0000000..09469b1
Binary files /dev/null and b/src/kern/compile/ASST3/threadtest.o differ
diff --git a/src/kern/compile/ASST3/tlb_mips1.o b/src/kern/compile/ASST3/tlb_mips1.o
new file mode 100644
index 0000000..2bcdb44
Binary files /dev/null and b/src/kern/compile/ASST3/tlb_mips1.o differ
diff --git a/src/kern/compile/ASST3/trap.o b/src/kern/compile/ASST3/trap.o
new file mode 100644
index 0000000..944a083
Binary files /dev/null and b/src/kern/compile/ASST3/trap.o differ
diff --git a/src/kern/compile/ASST3/tt3.o b/src/kern/compile/ASST3/tt3.o
new file mode 100644
index 0000000..7a0c769
Binary files /dev/null and b/src/kern/compile/ASST3/tt3.o differ
diff --git a/src/kern/compile/ASST3/uio.o b/src/kern/compile/ASST3/uio.o
new file mode 100644
index 0000000..4d50328
Binary files /dev/null and b/src/kern/compile/ASST3/uio.o differ
diff --git a/src/kern/compile/ASST3/vers.c b/src/kern/compile/ASST3/vers.c
new file mode 100644
index 0000000..01db343
--- /dev/null
+++ b/src/kern/compile/ASST3/vers.c
@@ -0,0 +1,3 @@
+/* This file is automatically generated. Edits will be lost.*/
+const int buildversion = 214;
+const char buildconfig[] = "ASST3";
diff --git a/src/kern/compile/ASST3/vers.o b/src/kern/compile/ASST3/vers.o
new file mode 100644
index 0000000..3fb6a43
Binary files /dev/null and b/src/kern/compile/ASST3/vers.o differ
diff --git a/src/kern/compile/ASST3/version b/src/kern/compile/ASST3/version
new file mode 100644
index 0000000..9d683f8
--- /dev/null
+++ b/src/kern/compile/ASST3/version
@@ -0,0 +1 @@
+214
diff --git a/src/kern/compile/ASST3/vfscwd.o b/src/kern/compile/ASST3/vfscwd.o
new file mode 100644
index 0000000..e75cd0e
Binary files /dev/null and b/src/kern/compile/ASST3/vfscwd.o differ
diff --git a/src/kern/compile/ASST3/vfslist.o b/src/kern/compile/ASST3/vfslist.o
new file mode 100644
index 0000000..01c88b7
Binary files /dev/null and b/src/kern/compile/ASST3/vfslist.o differ
diff --git a/src/kern/compile/ASST3/vfslookup.o b/src/kern/compile/ASST3/vfslookup.o
new file mode 100644
index 0000000..a7899c2
Binary files /dev/null and b/src/kern/compile/ASST3/vfslookup.o differ
diff --git a/src/kern/compile/ASST3/vfspath.o b/src/kern/compile/ASST3/vfspath.o
new file mode 100644
index 0000000..7ac5dbf
Binary files /dev/null and b/src/kern/compile/ASST3/vfspath.o differ
diff --git a/src/kern/compile/ASST3/vm.o b/src/kern/compile/ASST3/vm.o
new file mode 100644
index 0000000..3eb1b35
Binary files /dev/null and b/src/kern/compile/ASST3/vm.o differ
diff --git a/src/kern/compile/ASST3/vm_object.o b/src/kern/compile/ASST3/vm_object.o
new file mode 100644
index 0000000..1c5b8d9
Binary files /dev/null and b/src/kern/compile/ASST3/vm_object.o differ
diff --git a/src/kern/compile/ASST3/vnode.o b/src/kern/compile/ASST3/vnode.o
new file mode 100644
index 0000000..330b62c
Binary files /dev/null and b/src/kern/compile/ASST3/vnode.o differ
diff --git a/src/kern/conf/conf.kern b/src/kern/conf/conf.kern
index 0ad0521..b5052b1 100644
--- a/src/kern/conf/conf.kern
+++ b/src/kern/conf/conf.kern
@@ -391,6 +391,11 @@ file      userprog/uio.c
 
 optofffile dumbvm   vm/addrspace.c
 
+file vm/lpage.c
+file vm/vm.c
+file vm/vm_object.c
+file vm/swap.c
+
 #
 # Network
 # (nothing here yet)
diff --git a/src/kern/include/addrspace.h b/src/kern/include/addrspace.h
index 6b3e4d4..7a8d778 100644
--- a/src/kern/include/addrspace.h
+++ b/src/kern/include/addrspace.h
@@ -3,9 +3,15 @@
 
 #include <vm.h>
 #include "opt-dumbvm.h"
+#include <array.h>
+#include <machine/spl.h>
+#include <machine/tlb.h>
 
 struct vnode;
 
+
+
+
 /* 
  * Address space - data structure associated with the virtual memory
  * space of a process.
@@ -24,6 +30,10 @@ struct addrspace {
 	paddr_t as_stackpbase;
 #else
 	/* Put stuff here for your VM system */
+	// array of vm objects
+	struct array *as_objects;
+	vaddr_t sbrk_value;
+	vaddr_t max_brk_value;
 #endif
 };
 
@@ -74,6 +84,8 @@ int               as_define_region(struct addrspace *as,
 int		  as_prepare_load(struct addrspace *as);
 int		  as_complete_load(struct addrspace *as);
 int               as_define_stack(struct addrspace *as, vaddr_t *initstackptr);
+int as_fault(int faulttype, vaddr_t faultaddress, struct addrspace*  as);
+
 
 /*
  * Functions in loadelf.c
diff --git a/src/kern/include/kern/types.h b/src/kern/include/kern/types.h
index b2933df..119254b 100644
--- a/src/kern/include/kern/types.h
+++ b/src/kern/include/kern/types.h
@@ -11,4 +11,5 @@ typedef int32_t off_t;   /* Offset within file */
 typedef int32_t pid_t;   /* Process ID */
 typedef int32_t time_t;  /* Time in seconds */
 
+
 #endif /* _KERN_TYPES_H_ */
diff --git a/src/kern/include/lib.h b/src/kern/include/lib.h
index f108f14..d986e20 100644
--- a/src/kern/include/lib.h
+++ b/src/kern/include/lib.h
@@ -105,7 +105,6 @@ char *kstrdup(const char *);
 char *strchr(const char *, int);
 char *strrchr(const char *, int);
 char *strtok_r(char *buf, const char *seps, char **context);
-DEBUG("C string debug");
 void *memcpy(void *, const void *, size_t);
 void *memmove(void *, const void *, size_t);
 void bzero(void *, size_t);
@@ -115,7 +114,6 @@ int snprintf(char *buf, size_t maxlen, const char *fmt, ...) __PF(3,4);
 
 const char *strerror(int errcode);
 
-DEBUG("SET / JUMP functionality");
 /*
  * setjmp/longjmp functionality.
  */
@@ -129,7 +127,6 @@ void putch(int ch);
 int getch(void);
 void beep(void);
 
-DEBUG("Higher-level consoile output debug");
 /*
  * Higher-level console output.
  *
@@ -147,7 +144,6 @@ void panic(const char *fmt, ...) __PF(1,2);
 void kgets(char *buf, size_t maxbuflen);
 
 void kprintf_bootstrap(void);
-DEBUG("BYTE SWAP DEBUG");
 /*
  * Byte swap functions for the kernel.
  */
@@ -186,15 +182,8 @@ u_int64_t htonll(u_int64_t);
  *
  * These functions are machine-dependent.
  */
-DEBUG("copyin debug"); 
-int copyin(const_userptr_t usersrc, void *dest, size_t len);
-DEBUG("copyout debug");
-int copyout(const void *src, userptr_t userdest, size_t len);
-DEBUG("copyinstr debug");
-int copyinstr(const_userptr_t usersrc, char *dest, size_t len, size_t *got);
-DEBUG("copyoutstr debug");
-int copyoutstr(const char *src, userptr_t userdest, size_t len, size_t *got);
-DEBUG("simpletiming hooks debug");
+
+
 /*
  * Simple timing hooks.
  *
@@ -205,7 +194,6 @@ DEBUG("simpletiming hooks debug");
  */
 extern int lbolt;
 void clocksleep(int seconds);
-DEBUG("other miscellaneous stuff debug");
 /*
  * Other miscellaneous stuff
  */
diff --git a/src/kern/include/lpage.h b/src/kern/include/lpage.h
new file mode 100644
index 0000000..6ec5c61
--- /dev/null
+++ b/src/kern/include/lpage.h
@@ -0,0 +1,36 @@
+#ifndef _LPAGE_H_
+#define _LPAGE_H_
+
+#include <types.h>
+#include <machine/vm.h>
+#include <kern/errno.h>
+#include <lib.h>
+#include <thread.h>
+#include <addrspace.h>
+#include <synch.h>
+#include <swap.h>
+
+typedef struct {
+	volatile paddr_t lp_paddr;
+	off_t lp_swapaddr;
+	struct semaphore* lp_lock;
+} lpage;
+
+
+lpage* lpage_create();
+lpage* lpage_zerofill(lpage **lp);
+int lpage_fault(lpage *lp, struct addrspace *as, int faulttype, vaddr_t va);
+void lpage_lock_aquire(lpage *lp);
+void lpage_lock_release(lpage *lp);
+
+
+/* lpage flags */
+#define LPF_DIRTY		0x1
+#define LPF_MASK		0x1	// mask for the above
+
+#define LP_ISDIRTY(lp)		((lp)->lp_paddr & LPF_DIRTY)
+
+#define LP_SET(am, bit)		((lp)->lp_paddr |= (bit))
+#define LP_CLEAR(am, bit)	((lp)->lp_paddr &= ~(paddr_t)(bit))
+
+#endif
\ No newline at end of file
diff --git a/src/kern/include/swap.h b/src/kern/include/swap.h
new file mode 100644
index 0000000..84fbc07
--- /dev/null
+++ b/src/kern/include/swap.h
@@ -0,0 +1,27 @@
+#ifndef _SWAP_H_
+#define _SWAP_H_
+#include <synch.h>
+#include <types.h>
+#include <machine/vm.h>
+#include <kern/errno.h>
+#include <lib.h>
+#include <vm.h>
+#include <vnode.h>
+#include <uio.h>
+#include <bitmap.h>
+
+static const char swapfilename[] = "swapfile"; /*Swap file*/
+static struct vnode *swapstore; /* swap allocation map */ 
+static struct bitmap *swapmap; /* synchronizes swapmap and counters */ 
+static struct lock *swaplock;
+static unsigned long swap_total_pages; 
+static unsigned long swap_free_pages; 
+static unsigned long swap_reserved_pages;
+// struct lock *global_paging_lock;
+
+void swap_pagein(paddr_t pa, off_t swapaddr);
+void swap_pageout(paddr_t pa, off_t swapaddr);
+void swap_io(paddr_t pa, off_t swapaddr, enum uio_rw rw);
+off_t swap_alloc(void);
+void swap_bootstrap(void);
+#endif
\ No newline at end of file
diff --git a/src/kern/include/synch.h b/src/kern/include/synch.h
index 3583e78..5fa1f58 100644
--- a/src/kern/include/synch.h
+++ b/src/kern/include/synch.h
@@ -50,6 +50,8 @@ void              sem_destroy(struct semaphore *);
 
 struct lock {
 	char *name;
+	int value;
+	struct thread *lockOwner;
 	// add what you need here
 	// (don't forget to mark things volatile as needed)
 };
@@ -99,4 +101,4 @@ void       cv_signal(struct cv *cv, struct lock *lock);
 void       cv_broadcast(struct cv *cv, struct lock *lock);
 void       cv_destroy(struct cv *);
 
-#endif /* _SYNCH_H_ */
+#endif /* _SYNCH_H_ */
\ No newline at end of file
diff --git a/src/kern/include/vm.h b/src/kern/include/vm.h
index baaa325..94b32ea 100644
--- a/src/kern/include/vm.h
+++ b/src/kern/include/vm.h
@@ -1,6 +1,6 @@
 #ifndef _VM_H_
 #define _VM_H_
-
+#include <types.h>
 #include <machine/vm.h>
 
 /*
@@ -15,6 +15,13 @@
 #define VM_FAULT_WRITE       1    /* A write was attempted */
 #define VM_FAULT_READONLY    2    /* A write to a readonly page was attempted*/
 
+/* Invalid physical / virtual addresses for initialization routines */
+ #define INVALID_PADDR	((paddr_t)1)
+ #define INVALID_VADDR	((vaddr_t)1)
+ #define INVALID_SWAPADDR	(1)
+ #define ISKERNEL(x) ((x) & 0x00000001)
+ #define SET_KERNEL(x) ((x) | 0x00000001)
+
 
 /* Initialization function */
 void vm_bootstrap(void);
@@ -24,6 +31,20 @@ int vm_fault(int faulttype, vaddr_t faultaddress);
 
 /* Allocate/free kernel heap pages (called by kmalloc/kfree) */
 vaddr_t alloc_kpages(int npages);
+vaddr_t page_alloc(int npages);
+
 void free_kpages(vaddr_t addr);
+void page_free(vaddr_t addr);
+
+struct vm_object *vm_object_create (size_t npages);
+
+struct vm_object{
+	struct array *lpages;
+	vaddr_t base_address;
+	int readable:1;
+	int writeable:1;
+	int executable:1;	
+};
+
 
 #endif /* _VM_H_ */
diff --git a/src/kern/lib/kheap.c b/src/kern/lib/kheap.c
index 8af3e4a..f117055 100644
--- a/src/kern/lib/kheap.c
+++ b/src/kern/lib/kheap.c
@@ -2,6 +2,7 @@
 #include <lib.h>
 #include <vm.h>
 #include <machine/spl.h>
+#include <machine/coremap.h>
 
 static
 void
@@ -545,6 +546,10 @@ subpage_kfree(void *ptr)
 void *
 kmalloc(size_t sz)
 {
+	// temporary
+	if(vm_bootstrapped){
+		DEBUG(DB_VM, "\n Calling malloc for size %d", sz);
+	}
 	if (sz>=LARGEST_SUBPAGE_SIZE) {
 		unsigned long npages;
 		vaddr_t address;
diff --git a/src/kern/main/main.c b/src/kern/main/main.c
index c042284..2a6e7b9 100644
--- a/src/kern/main/main.c
+++ b/src/kern/main/main.c
@@ -15,6 +15,7 @@
 #include <vm.h>
 #include <syscall.h>
 #include <version.h>
+#include <swap.h>
 
 /*
  * Phillip Robertson & Grace Wang
@@ -64,7 +65,7 @@ boot(void)
 	 * anything at all. You can make it larger though (it's in
 	 * dev/generic/console.c).
 	 */
-
+	dbflags = DB_VM|DB_EXEC;
 	kprintf("\n");
 	kprintf("OS/161 base system version %s\n", BASE_VERSION);
 	kprintf("%s", harvard_copyright);
@@ -85,6 +86,7 @@ boot(void)
 	/* Default bootfs - but ignore failure, in case emu0 doesn't exist */
 	vfs_setbootfs("emu0");
 
+	swap_bootstrap();
 
 	/*
 	 * Make sure various things aren't screwed up.
diff --git a/src/kern/thread/synch.c b/src/kern/thread/synch.c
index cdc47a3..d3ec4c3 100644
--- a/src/kern/thread/synch.c
+++ b/src/kern/thread/synch.c
@@ -112,8 +112,8 @@ lock_create(const char *name)
 		return NULL;
 	}
 	
-	// add stuff here as needed
-	
+  lock->value = 0;
+  lock->lockOwner = NULL;
 	return lock;
 }
 
@@ -122,36 +122,52 @@ lock_destroy(struct lock *lock)
 {
 	assert(lock != NULL);
 
-	// add stuff here as needed
-	
-	kfree(lock->name);
+	kfree(lock->value);
 	kfree(lock);
 }
 
 void
 lock_acquire(struct lock *lock)
 {
-	// Write this
+  int spl;
+  assert(lock != NULL);
+	assert(in_interrupt==0);
 
-	(void)lock;  // suppress warning until code gets written
+  spl = splhigh();
+  assert(!lock_do_i_hold(lock)); 
+  while (lock->value) {
+    thread_sleep(lock);
+  }
+  lock->lockOwner = curthread;
+  lock->value = 1;
+  splx(spl);
 }
 
+
 void
 lock_release(struct lock *lock)
 {
-	// Write this
-
-	(void)lock;  // suppress warning until code gets written
+  assert(lock != NULL);
+  assert(lock->value);
+  assert(lock_do_i_hold(lock));
+
+  int spl;
+  spl = splhigh();
+  lock->value = 0;
+  lock->lockOwner = NULL;
+  thread_wakeup(lock);
+  splx(spl);
 }
 
 int
 lock_do_i_hold(struct lock *lock)
 {
-	// Write this
+  assert(lock != NULL);
 
-	(void)lock;  // suppress warning until code gets written
+  if (!lock->value) return 0;
 
-	return 1;    // dummy until code gets written
+  if (lock->lockOwner == curthread) return 1;
+  else return 0;
 }
 
 ////////////////////////////////////////////////////////////
@@ -175,8 +191,6 @@ cv_create(const char *name)
 		return NULL;
 	}
 	
-	// add stuff here as needed
-	
 	return cv;
 }
 
@@ -185,8 +199,6 @@ cv_destroy(struct cv *cv)
 {
 	assert(cv != NULL);
 
-	// add stuff here as needed
-	
 	kfree(cv->name);
 	kfree(cv);
 }
@@ -194,23 +206,27 @@ cv_destroy(struct cv *cv)
 void
 cv_wait(struct cv *cv, struct lock *lock)
 {
-	// Write this
-	(void)cv;    // suppress warning until code gets written
-	(void)lock;  // suppress warning until code gets written
+  int spl;
+
+  lock_release(lock);
+  spl = splhigh();
+  thread_sleep(cv);
+  splx(spl);
+  lock_acquire(lock);
 }
 
 void
 cv_signal(struct cv *cv, struct lock *lock)
 {
-	// Write this
-	(void)cv;    // suppress warning until code gets written
-	(void)lock;  // suppress warning until code gets written
+  int spl = splhigh();
+  thread_wakeup(cv);
+  splx(spl);
 }
 
 void
 cv_broadcast(struct cv *cv, struct lock *lock)
 {
-	// Write this
-	(void)cv;    // suppress warning until code gets written
-	(void)lock;  // suppress warning until code gets written
-}
+  int spl = splhigh();
+  thread_wakeup(cv);
+  splx(spl);
+}
\ No newline at end of file
diff --git a/src/kern/thread/thread.c b/src/kern/thread/thread.c
index d08f473..f086787 100644
--- a/src/kern/thread/thread.c
+++ b/src/kern/thread/thread.c
@@ -244,7 +244,9 @@ thread_fork(const char *name,
 	}
 
 	/* Allocate a stack */
+	DEBUG(DB_VM, "\nCalling malloc for size %d", STACK_SIZE);
 	newguy->t_stack = kmalloc(STACK_SIZE);
+
 	if (newguy->t_stack==NULL) {
 		kfree(newguy->t_name);
 		kfree(newguy);
diff --git a/src/kern/userprog/loadelf.c b/src/kern/userprog/loadelf.c
index 9651c88..6c31ec3 100644
--- a/src/kern/userprog/loadelf.c
+++ b/src/kern/userprog/loadelf.c
@@ -47,6 +47,7 @@ load_segment(struct vnode *v, off_t offset, vaddr_t vaddr,
 		filesize = memsize;
 	}
 
+
 	DEBUG(DB_EXEC, "ELF: Loading %lu bytes to 0x%lx\n", 
 	      (unsigned long) filesize, (unsigned long) vaddr);
 
@@ -63,12 +64,14 @@ load_segment(struct vnode *v, off_t offset, vaddr_t vaddr,
 		return result;
 	}
 
+
 	if (u.uio_resid != 0) {
 		/* short read; problem with executable? */
 		kprintf("ELF: short read on segment - file truncated?\n");
 		return ENOEXEC;
 	}
 
+
 	/* Fill the rest of the memory space (if any) with zeros */
 	fillamt = memsize - filesize;
 	if (fillamt > 0) {
@@ -78,6 +81,8 @@ load_segment(struct vnode *v, off_t offset, vaddr_t vaddr,
 		result = uiomovezeros(fillamt, &u);
 	}
 	
+	DEBUG(DB_VM, "\nDONE LOADING ELF\n");
+
 	return result;
 }
 
@@ -183,9 +188,11 @@ load_elf(struct vnode *v, vaddr_t *entrypoint)
 		if (result) {
 			return result;
 		}
+
 	}
 
 	result = as_prepare_load(curthread->t_vmspace);
+
 	if (result) {
 		return result;
 	}
@@ -219,10 +226,10 @@ load_elf(struct vnode *v, vaddr_t *entrypoint)
 				ph.p_type);
 			return ENOEXEC;
 		}
-
 		result = load_segment(v, ph.p_offset, ph.p_vaddr, 
 				      ph.p_memsz, ph.p_filesz,
 				      ph.p_flags & PF_X);
+
 		if (result) {
 			return result;
 		}
@@ -232,7 +239,6 @@ load_elf(struct vnode *v, vaddr_t *entrypoint)
 	if (result) {
 		return result;
 	}
-
 	*entrypoint = eh.e_entry;
 
 	return 0;
diff --git a/src/kern/userprog/runprogram.c b/src/kern/userprog/runprogram.c
index 7473e27..28b0e55 100644
--- a/src/kern/userprog/runprogram.c
+++ b/src/kern/userprog/runprogram.c
@@ -39,6 +39,8 @@ runprogram(char *progname)
 
 	/* Create a new address space. */
 	curthread->t_vmspace = as_create();
+	DEBUG(DB_VM, "\nRUN PROGRAM: ADDRESS SPACE CREATED\n");
+
 	if (curthread->t_vmspace==NULL) {
 		vfs_close(v);
 		return ENOMEM;
@@ -49,6 +51,7 @@ runprogram(char *progname)
 
 	/* Load the executable. */
 	result = load_elf(v, &entrypoint);
+	
 	if (result) {
 		/* thread_exit destroys curthread->t_vmspace */
 		vfs_close(v);
@@ -59,6 +62,7 @@ runprogram(char *progname)
 	vfs_close(v);
 
 	/* Define the user stack in the address space */
+	DEBUG(DB_VM, "DEFINING STACK");
 	result = as_define_stack(curthread->t_vmspace, &stackptr);
 	if (result) {
 		/* thread_exit destroys curthread->t_vmspace */
diff --git a/src/kern/userprog/uio.c b/src/kern/userprog/uio.c
index e1cf0e1..00ceca7 100644
--- a/src/kern/userprog/uio.c
+++ b/src/kern/userprog/uio.c
@@ -11,6 +11,7 @@
 int
 uiomove(void *ptr, size_t n, struct uio *uio)
 {
+
 	struct iovec *iov;
 	size_t size;
 	int result;
@@ -57,9 +58,11 @@ uiomove(void *ptr, size_t n, struct uio *uio)
 		    case UIO_USERISPACE:
 			    if (uio->uio_rw == UIO_READ) {
 				    result = copyout(ptr, iov->iov_ubase,size);
+
 			    }
 			    else {
 				    result = copyin(iov->iov_ubase, ptr, size);
+
 			    }
 			    if (result) {
 				    return result;
diff --git a/src/kern/vm/.fuse_hidden0000000400000001 b/src/kern/vm/.fuse_hidden0000000400000001
new file mode 100644
index 0000000..625df90
--- /dev/null
+++ b/src/kern/vm/.fuse_hidden0000000400000001
@@ -0,0 +1,222 @@
+#include <types.h>
+#include <kern/errno.h>
+#include <lib.h>
+#include <addrspace.h>
+#include <vm.h>
+#include <lpage.h>
+#include <machine/coremap.h>
+
+/*
+ * Note! If OPT_DUMBVM is set, as is the case until you start the VM
+ * assignment, this file is not compiled or linked or in any way
+ * used. The cheesy hack versions in dumbvm.c are used instead.
+ */
+
+struct addrspace *as_create(void) {
+	struct addrspace *as = kmalloc(sizeof(struct addrspace));
+	if (as==NULL) {
+		return NULL;
+	}
+	// create array of page tables
+	as -> as_objects = (struct vm_object*)array_create();
+	DEBUG(DB_VM, "\nArray allocated for address space objects\n");
+
+	// verify as_objects array was created successfully
+	if (as->as_objects == NULL) {
+		kfree(as);
+		return NULL;
+	}
+
+	return as;
+}
+
+\
+int as_fault(int faulttype, vaddr_t faultaddress, struct addrspace*  as){
+	// DEBUG(DB_VM, "\nENTERING AS FAULT FOR VADDR %d\n", faultaddress);
+	struct vm_object *vmo, *fault_vmo=NULL;
+	int top, bottom, i;
+	for (i = 0; i < array_getnum(as->as_objects); i++) {
+		vmo = array_getguy(as->as_objects, i);
+		bottom = vmo -> base_address; 
+		top = bottom + PAGE_SIZE * array_getnum(vmo->lpages);
+		if (bottom <= faultaddress <= top) {
+			fault_vmo = vmo; 
+			break;
+		}
+	}
+	if(fault_vmo){
+		DEBUG(DB_VM, "\nFOUND VM OBJECT CONTAINING VM FAULT FOR VADDR %d\n", faultaddress);
+		DEBUG(DB_VM, "\nVMO BASE ADDRESS %d\n", fault_vmo -> base_address);
+
+		int lpage_index = (faultaddress - (fault_vmo -> base_address)) / PAGE_SIZE;	
+		lpage* lp = array_getguy(fault_vmo -> lpages, lpage_index);
+		if(lp == NULL){
+			DEBUG(DB_VM, "LPAGE NOT FOUND... CREATING");
+			lp = lpage_zerofill();
+			array_setguy(fault_vmo -> lpages, lpage_index, lp);
+		}
+
+		return lpage_fault(lp, as, faulttype, faultaddress);
+	
+	} else{
+		return EFAULT;
+	}
+};
+
+
+
+
+int
+as_copy(struct addrspace *old, struct addrspace **ret)
+{
+	struct addrspace *newas;
+
+	newas = as_create();
+	if (newas==NULL) {
+		return ENOMEM;
+	}
+
+	/*
+	 * Write this.
+	 */
+
+	(void)old;
+	
+	*ret = newas;
+	return 0;
+}
+
+void
+as_destroy(struct addrspace *as)
+{
+	/*
+	 * Clean up as needed.
+	 */
+	
+	kfree(as);
+}
+
+void
+as_activate(struct addrspace *as)
+{
+	/*
+	 * Write this.
+	 */
+
+	(void)as;  // suppress warning until code gets written
+}
+

+ // set up a segment of virtual address space for a program to run
+ // gives a place to load the elf format file into the allocated chunk user address space
+int as_define_region(struct addrspace *as, vaddr_t vaddr, size_t sz, int readable, int writeable, int executable){
+	DEBUG(DB_VM, "\nCREATING ADDRESS SPACE REGION FOR STACK/TEXT/CODE SEGMENT\n");
+	struct vm_object *vmobj;
+	int i, result;
+
+	/* align base address */
+	vaddr &= PAGE_FRAME;
+
+	/* size may not be */
+	sz = ROUNDUP(sz, PAGE_SIZE);
+
+
+	/* Create a new vmo. All pages are marked zerofilled. */
+	vmobj = vm_object_create(sz/PAGE_SIZE);
+
+	// set up page table permissions, e.g. data segment may be read only, code segment needs to be executable, etc...
+	vmobj -> readable = readable;
+	vmobj -> writeable = writeable;
+	vmobj -> executable = executable;
+	vmobj -> base_address = vaddr;
+	DEBUG(DB_VM, "SETTING VMO WITH VADDR %d", vaddr);
+
+	if (vmobj == NULL) {
+		return ENOMEM;
+	}
+	// vmo->vmo_base = vaddr;
+	// vmo->vmo_lower_redzone = lower_redzone;
+
+	/* Add it to the parent address space. */
+	array_add(as->as_objects, vmobj);
+	// if (result) {
+	// 	vm_object_destroy(as, vmo);
+	// 	return result;
+	// }
+
+	/* Done */
+	return 0;
+	
+}
+
+int
+as_prepare_load(struct addrspace *as)
+{
+	/*
+	 * Write this.
+	 */
+
+	(void)as;
+	return 0;
+}
+
+int
+as_complete_load(struct addrspace *as)
+{
+	/*
+	 * Write this.
+	 */
+
+	(void)as;
+	return 0;
+}
+
+int
+as_define_stack(struct addrspace *as, vaddr_t *stackptr)
+{
+	/*
+	 * Write this.
+	 */
+
+
+	int result = as_define_region(as, USERSTACK, USERSTACKSIZE, 1, 1, 0);
+	if(result){
+		return result;
+	}
+	/* Initial user-level stack pointer */
+	*stackptr = USERSTACK;
+	
+	return 0;
+}
+
diff --git a/src/kern/vm/addrspace.c b/src/kern/vm/addrspace.c
index 1cbadd9..b7e335a 100644
--- a/src/kern/vm/addrspace.c
+++ b/src/kern/vm/addrspace.c
@@ -3,6 +3,8 @@
 #include <lib.h>
 #include <addrspace.h>
 #include <vm.h>
+#include <lpage.h>
+#include <machine/coremap.h>
 
 /*
  * Note! If OPT_DUMBVM is set, as is the case until you start the VM
@@ -10,21 +12,62 @@
  * used. The cheesy hack versions in dumbvm.c are used instead.
  */
 
-struct addrspace *
-as_create(void)
-{
+struct addrspace *as_create(void) {
 	struct addrspace *as = kmalloc(sizeof(struct addrspace));
 	if (as==NULL) {
 		return NULL;
 	}
+	// create array of page tables
+	as -> as_objects = (struct vm_object*)array_create();
 
-	/*
-	 * Initialize as needed.
-	 */
+	// verify as_objects array was created successfully
+	if (as->as_objects == NULL) {
+		kfree(as);
+		return NULL;
+	}
 
 	return as;
 }
 
+\
+int as_fault(int faulttype, vaddr_t faultaddress, struct addrspace*  as){
+	DEBUG(DB_VM, "\nENTERING ADDRESS SPACE FAULT FOR ADDRESS %d\n", faultaddress);
+	struct vm_object *vmo, *fault_vmo=NULL;
+	int top, bottom, i;
+	for (i = 0; i < array_getnum(as->as_objects); i++) {
+		vmo = array_getguy(as->as_objects, i);
+		bottom = vmo -> base_address; 
+		top = bottom + PAGE_SIZE * array_getnum(vmo->lpages);
+		if (bottom <= faultaddress <= top) {
+			fault_vmo = vmo; 
+			break;
+		}
+	}
+	if(fault_vmo){
+		DEBUG(DB_VM, "\nFOUND PAGE TABLE WITH BASE %d THAT IS SUPPOSED TO CONTAIN LPAGE WITH VADDR %d\n", fault_vmo -> base_address, faultaddress);
+		// offset, lpage entries are indexed by its virtual addresses
+		int lpage_index = (faultaddress - (fault_vmo -> base_address)) / PAGE_SIZE;	
+		lpage* lp = array_getguy(fault_vmo -> lpages, lpage_index);
+		if(lp == NULL){
+			DEBUG(DB_VM, "LPAGE WITH VADDR %d NOT FOUND, CREATING...", faultaddress);
+			lpage_zerofill(&lp);
+			DEBUG(DB_VM, "CREATED LPAGE WITH PADDR %d AND SWAPADDR %d", lp -> lp_paddr, lp -> lp_swapaddr);
+			array_setguy(fault_vmo -> lpages, lpage_index, lp);
+
+		}
+		return lpage_fault(lp, as, faulttype, faultaddress);
+	
+	} else{
+		return EFAULT;
+	}
+};
+
+
+int as_dump(){
+	kprintf("\nPAGE TABLE\n");
+}
+
+
 int
 as_copy(struct addrspace *old, struct addrspace **ret)
 {
@@ -58,11 +101,19 @@ as_destroy(struct addrspace *as)
 void
 as_activate(struct addrspace *as)
 {
-	/*
-	 * Write this.
-	 */
+	int i, spl;
+
+	(void)as;
+
+	spl = splhigh();
+
+	for (i=0; i<NUM_TLB; i++) {
+		TLB_Write(TLBHI_INVALID(i), TLBLO_INVALID(), i);
+	}
+
+	// _vmstats_inc(VMSTAT_TLB_INVALIDATE);
 
-	(void)as;  // suppress warning until code gets written
+	splx(spl);
 }
 
 /*
@@ -75,21 +126,47 @@ as_activate(struct addrspace *as)
  * moment, these are ignored. When you write the VM system, you may
  * want to implement them.
  */
-int
-as_define_region(struct addrspace *as, vaddr_t vaddr, size_t sz,
-		 int readable, int writeable, int executable)
-{
-	/*
-	 * Write this.
-	 */
 
-	(void)as;
-	(void)vaddr;
-	(void)sz;
-	(void)readable;
-	(void)writeable;
-	(void)executable;
-	return EUNIMP;
+ // set up a segment of virtual address space for a program to run
+ // gives a place to load the elf format file into the allocated chunk user address space
+int as_define_region(struct addrspace *as, vaddr_t vaddr, size_t sz, int readable, int writeable, int executable){
+	DEBUG(DB_VM, "\nCREATING ADDRESS SPACE REGION FOR STACK/TEXT/CODE SEGMENT\n");
+	struct vm_object *vmobj;
+	
+	int i, result;
+
+	/* align base address */
+	vaddr &= PAGE_FRAME;
+
+	/* size may not be */
+	sz = ROUNDUP(sz, PAGE_SIZE);
+
+
+	/* Create a new vmo. All pages are marked zerofilled. */
+	vmobj = vm_object_create(sz/PAGE_SIZE);
+
+	// set up page table permissions, e.g. data segment may be read only, code segment needs to be executable, etc...
+	vmobj -> readable = readable;
+	vmobj -> writeable = writeable;
+	vmobj -> executable = executable;
+	vmobj -> base_address = vaddr;
+
+	if (vmobj == NULL) {
+		return ENOMEM;
+	}
+	// vmo->vmo_base = vaddr;
+	// vmo->vmo_lower_redzone = lower_redzone;
+
+	/* Add it to the parent address space. */
+	array_add(as->as_objects, vmobj);
+	// if (result) {
+	// 	vm_object_destroy(as, vmo);
+	// 	return result;
+	// }
+
+	/* Done */
+	return 0;
+	
 }
 
 int
@@ -121,8 +198,11 @@ as_define_stack(struct addrspace *as, vaddr_t *stackptr)
 	 * Write this.
 	 */
 
-	(void)as;
 
+	int result = as_define_region(as, USERSTACK, USERSTACKSIZE, 1, 1, 0);
+	if(result){
+		return result;
+	}
 	/* Initial user-level stack pointer */
 	*stackptr = USERSTACK;
 	
diff --git a/src/kern/vm/lpage.c b/src/kern/vm/lpage.c
new file mode 100644
index 0000000..ec552e9
--- /dev/null
+++ b/src/kern/vm/lpage.c
@@ -0,0 +1,97 @@
+#include <lpage.h>
+#include <machine/coremap.h>
+
+
+lpage* lpage_create(){
+	lpage *ret = kmalloc(sizeof(lpage));
+	if(ret){
+		ret -> lp_paddr  = INVALID_VADDR;
+		ret -> lp_swapaddr = INVALID_PADDR;
+        ret -> lp_lock = sem_create("lp_lock", 1);
+    } 
+	return ret;
+}
+
+lpage* lpage_zerofill(lpage ** lpret){
+	lpage *lp;
+	paddr_t pa;
+	off_t swa;
+
+	lp = lpage_create();
+	if (lp == NULL) {
+		return ENOMEM;
+	}
+
+
+	swa = swap_alloc();
+    
+	if (swa == INVALID_SWAPADDR) {
+		return ENOSPC;
+	}
+    pa = coremap_allocuser(lp);
+
+    lp->lp_paddr = pa | LPF_DIRTY;
+    lp->lp_swapaddr = swa;
+
+
+
+    DEBUG(DB_VM ,"PADDR %d", pa);
+	if (pa == INVALID_PADDR) {
+		/* lpage_destroy will clean up the swap */
+		// lpage_destroy(lp);
+		return ENOSPC;
+	}
+
+	// lpage_lock(lp);
+	*lpret = lp;
+	return 0;
+}
+
+
+int lpage_fault(lpage *lp, struct addrspace *as, int faulttype, vaddr_t va)
+{
+    /* Handle  TLB miss. */
+    if ((faulttype == VM_FAULT_READ) || (faulttype == VM_FAULT_WRITE)) {
+        lpage_lock_acquire(lp);
+        paddr_t pa = (lp->lp_paddr & PAGE_FRAME);
+        
+        /* If data is not in physical memory, swap in. */
+        if (pa == INVALID_PADDR) {
+            off_t swa = lp->lp_swapaddr;
+            lpage_lock_release(lp);
+            DEBUG(DB_VM,"\n\n\n\n4");
+            
+            //Check if physical memory was allocated successfully.
+            if (pa == INVALID_PADDR) {
+                return ENOMEM;
+            }
+            
+            DEBUG(DB_VM, "Swapping in a page.\n");
+            swap_pagein(pa, swa);
+//            lpage_lock_acquire(lp);
+            lp->lp_paddr = pa & PAGE_FRAME;
+        }
+        
+        lpage_lock_release(lp);
+        mmu_map(as, va, pa, LP_ISDIRTY(lp));
+    }
+    /* Handle readonly fault. Update the dirty bit to 1. */
+    else {
+        paddr_t pa = lp->lp_paddr;
+        lpage_lock_release(lp);
+        
+        mmu_unmap(as, va);
+        mmu_map(as, va, pa, LPF_DIRTY);
+    }
+    
+    return 0;
+}
+
+
+void lpage_lock_acquire(lpage *lp){
+    lock_acquire(lp -> lp_lock);
+}
+
+void lpage_lock_release(lpage *lp){
+    lock_release(lp -> lp_lock);
+}
diff --git a/src/kern/vm/swap.c b/src/kern/vm/swap.c
new file mode 100644
index 0000000..32c3524
--- /dev/null
+++ b/src/kern/vm/swap.c
@@ -0,0 +1,86 @@
+#include <swap.h>
+#include <types.h>
+#include <kern/errno.h>
+#include <kern/limits.h>
+#include <kern/unistd.h>
+#include <vfs.h>
+#include <vnode.h>
+#include <lib.h>
+#include <kern/stat.h>
+
+void swap_bootstrap(void){
+  int rv;
+  struct stat st;
+  char path[sizeof(swapfilename)];
+  off_t minsize;
+  size_t pmemsize;
+
+  // pmemsize = mainbus_ramsize();
+
+  strcpy(path, swapfilename);
+  rv = vfs_open(path, O_RDWR, &swapstore);
+
+  if (rv) {
+    panic("swap: Unable to continue.\n");
+  }
+
+  swap_total_pages = st.st_size / PAGE_SIZE;
+  swap_free_pages = swap_total_pages;
+  swap_reserved_pages = 0;
+
+  swapmap = bitmap_create(st.st_size/PAGE_SIZE);
+  DEBUG(DB_VM, "creating swap map with %lld entries\n",
+      st.st_size/PAGE_SIZE);
+  swaplock = lock_create("swaplock");
+  bitmap_mark(swapmap, 0);
+  swap_free_pages--;
+}
+
+void swap_pagein(paddr_t pa, off_t swapaddr){
+  DEBUG(DB_VM, "SWAPPING PAGE IN");
+  swap_io(pa, swapaddr, UIO_READ);
+};
+
+void swap_io(paddr_t pa, off_t swapaddr, enum uio_rw rw){
+  
+  struct uio u; vaddr_t va;
+  int result;
+  // Get va from pa;
+  va = PADDR_TO_KVADDR(pa);
+  mk_kuio(&u, (char *)va, PAGE_SIZE, swapaddr, rw); 
+  
+  if(rw == UIO_READ) { 
+  	result = VOP_READ(swapstore, &u);
+  } 
+  else {
+    result = VOP_WRITE(swapstore, &u);
+  }
+  DEBUG(DB_VM, "SWAP IO");
+
+  if (result==EIO){
+  	panic("swap: EIO on swapfile (offset %ld)\n",(long)swapaddr); 
+  }
+  if(result==EINVAL){
+    panic("swap: EINVAL on swapfile(offset%ld)\n",(long)swapaddr);
+  } 
+  if (result) {
+  	panic("swap: Error %d from swapfile (offset %ld)\n", result, (long)swapaddr);
+  }
+}
+
+off_t
+swap_alloc(void)
+{
+  u_int32_t rv, index;
+  
+  lock_acquire(swaplock);
+
+  rv = bitmap_alloc(swapmap, &index);
+
+  swap_reserved_pages--;
+  swap_free_pages--;
+
+  lock_release(swaplock);
+
+  return index*PAGE_SIZE;
+}
\ No newline at end of file
diff --git a/src/kern/vm/vm.c b/src/kern/vm/vm.c
new file mode 100644
index 0000000..171977a
--- /dev/null
+++ b/src/kern/vm/vm.c
@@ -0,0 +1,79 @@
+#include <types.h>
+#include <kern/errno.h>
+#include <lib.h>
+#include <thread.h>
+#include <curthread.h>
+#include <addrspace.h>
+#include <vm.h>
+#include <machine/coremap.h>
+#include <machine/spl.h>
+#include <machine/tlb.h>
+#include <swap.h>
+
+
+
+void vm_bootstrap(void) {
+	coremap_bootstrap();
+}
+
+
+
+int vm_fault(int faulttype, vaddr_t faultaddress){
+	DEBUG(DB_VM, "\nENTERING VM FAULT FOR ADDRESS (not-page aligned): %d\n", faultaddress);
+
+    int spl;
+	spl = splhigh();
+    faultaddress &= PAGE_FRAME;
+    struct addrspace * as = curthread -> t_vmspace;
+
+	switch (faulttype) {
+	
+	    case VM_FAULT_READONLY:
+			/* We always create pages read-write, so we can't get this */
+			// TLB READ MISS PROPIGATED FROM SYS161
+		
+		case VM_FAULT_READ:
+	    	as_fault(faulttype, faultaddress, as);
+	    	break;
+
+	    case VM_FAULT_WRITE:
+	    	as_fault(faulttype, faultaddress, as);
+			break;
+	    
+	    default:
+	    	// UNKNOWN VMFAULT ERROR
+			splx(spl);
+			return EINVAL;
+
+	}
+
+	int i = faultaddress + faulttype;
+	return i;
+}
+
+
+vaddr_t alloc_kpages(int npages){
+	paddr_t pa;
+	if(npages > 1){
+		pa = coremap_alloc_multipages(npages);
+	}
+	else {
+		pa = coremap_alloc_page(NULL, 0); // dont pin because kernal space allocation
+	}
+	if(pa == INVALID_PADDR){
+		return 0;
+	}
+	return PADDR_TO_KVADDR(pa);
+};
+
+void free_kpages(vaddr_t npages){
+	if(npages > 1){
+		coremap_free_multipages(npages);
+	}
+	else {
+		coremap_free_page();
+	}
+	// if(pa == INVALID_VADDR){
+	// 	panic("invalid virtual address")
+	// }
+};
diff --git a/src/kern/vm/vm_object.c b/src/kern/vm/vm_object.c
new file mode 100644
index 0000000..72e89e3
--- /dev/null
+++ b/src/kern/vm/vm_object.c
@@ -0,0 +1,48 @@
+#include <vm.h> 
+#include <kern/errno.h>
+#include <lib.h>
+#include <array.h>
+
+struct vm_object *vm_object_create (size_t npages)
+{
+
+	struct vm_object *vmo;
+	unsigned i;
+	int result;
+
+	// result = swap_reserve(npages);
+	// if (result != 0) {
+	// 	return NULL;
+	// }
+
+	vmo = kmalloc(sizeof(struct vm_object));
+	if (vmo == NULL) {
+		// swap_unreserve(npages);
+		return NULL;
+	}
+
+	vmo->lpages = array_create();
+	if (vmo->lpages == NULL) {
+		kfree(vmo);
+		// swap_unreserve(npages);
+		return NULL;
+	}
+
+	vmo->base_address = 0xdeafbeef;		/* make sure these */
+
+	/* add the requested number of zerofilled pages */
+	result = array_setsize(vmo->lpages, npages);
+	if (result) {
+		array_destroy(vmo->lpages);
+		kfree(vmo);
+		// swap_unreserve(npages);
+		return NULL;
+	}
+
+	for (i=0; i<npages; i++) {
+		array_setguy(vmo->lpages, i, NULL);
+	}
+
+	return vmo;
+
+}
\ No newline at end of file
diff --git a/src/lib/libc/libc.a b/src/lib/libc/libc.a
index 01aa01b..a630ea1 100644
Binary files a/src/lib/libc/libc.a and b/src/lib/libc/libc.a differ
diff --git a/src/testbin/add/add b/src/testbin/add/add
index dd0c3ab..9d62154 100755
Binary files a/src/testbin/add/add and b/src/testbin/add/add differ
diff --git a/src/testbin/add/add.c b/src/testbin/add/add.c
index 258a5d1..5dd9cc8 100644
--- a/src/testbin/add/add.c
+++ b/src/testbin/add/add.c
@@ -9,20 +9,10 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <err.h>
-
 int
 main(int argc, char *argv[])
 {
-	int i, j;
-
-	if (argc != 3) {
-		errx(1, "Usage: add num1 num2");
-	}
-
-	i = atoi(argv[1]);
-	j = atoi(argv[2]);
-
-	printf("Answer: %d\n", i+j);
-
+	int i;
+	
 	return 0;
 }
diff --git a/src/testbin/add/add.o b/src/testbin/add/add.o
index 4317c19..5ad9e63 100644
Binary files a/src/testbin/add/add.o and b/src/testbin/add/add.o differ
diff --git a/src/testbin/getpidtest/forktest.o b/src/testbin/getpidtest/forktest.o
new file mode 100644
index 0000000..39c7cbf
Binary files /dev/null and b/src/testbin/getpidtest/forktest.o differ
diff --git a/src/testbin/getpidtest/getpidtest.o b/src/testbin/getpidtest/getpidtest.o
new file mode 100644
index 0000000..a2e3d23
Binary files /dev/null and b/src/testbin/getpidtest/getpidtest.o differ
